<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Devops - Category - mrtn.me</title><link>http://mrtn.me/categories/devops/</link><description>Devops - Category - mrtn.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Fri, 13 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://mrtn.me/categories/devops/" rel="self" type="application/rss+xml"/><item><title>Debugging a failing OpenStack image</title><link>http://mrtn.me/posts/2023/01/13/debugging-a-failing-openstack-image/</link><pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2023/01/13/debugging-a-failing-openstack-image/</guid><description>The problem On my alpine-openstack-vm project, There is a CI process producing a VM image for OpenStack. The process involves testing that the machine boots. The test fails, but the machine is actually booted. What doesnâ€™t work is the ssh access. As the machine can only be reached via SSH with a private key for obvious security reasons, not having access prevents proper debug.
The objective The objective is to be able to run the produced VM locally to assess the issue.</description></item><item><title>Mirror a Git Repository Through Ssh</title><link>http://mrtn.me/posts/2012/11/15/mirror-a-git-repository-through-ssh/</link><pubDate>Thu, 15 Nov 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/11/15/mirror-a-git-repository-through-ssh/</guid><description>Redmine can show the timeline of a Git repository but this repository needs to be local (see here). When you host your repository externally (on GitHub, for instance), you need to synchronize your remote repository on your Redmine server.
The following shell script is an All in one command that can be easily put in the crontab to mirror the repository on your Redmine server :
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!</description></item><item><title>Quickly Deploy a Git Project on a Server With Ssh</title><link>http://mrtn.me/posts/2012/10/24/quickly-deploy-a-git-project-on-a-server-with-ssh/</link><pubDate>Wed, 24 Oct 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/10/24/quickly-deploy-a-git-project-on-a-server-with-ssh/</guid><description>So you have this brand new project my_project of yours with your local Git repository set up and you want to quickly make it available for others to clone on your repository server.
All your projects are located in your server git.mycompany.com under /srv/git. You&amp;rsquo;re using the user named git to connect to your server with the SSH private key located in ~/.ssh/git.
Here is the quickiest way to deploy your projet:</description></item><item><title>Installing Redmine on Centos 6 Dot 2 Wiht Mysql and Apache</title><link>http://mrtn.me/posts/2012/07/06/installing-redmine-on-centos-6-dot-2-wiht-mysql-and-apache/</link><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/07/06/installing-redmine-on-centos-6-dot-2-wiht-mysql-and-apache/</guid><description>I needed recently to install the excellent project management tool Redmine on a CentOS 6.2 machine. There are some tutorials on the Web (here or here) but they are a little bit outdated. The following is a method that works as of today.
Pre-requisites Logged as root, install the following packages:
1 yum install make gcc gcc-c++ zlib-devel ruby-devel rubygems ruby-libs apr-devel apr-util-devel httpd-devel mysql-devel mysql-server automake autoconf ImageMagick ImageMagick-devel curl-devel And then install the bundle ruby gem:</description></item><item><title>Django on Windows: Run Celery as a Windows Service</title><link>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</guid><description>In my previous post, I showed how to set up a Django project on a Windows Server to be served behind IIS. After setting up the server, the next thing we want with a Django application is to be able to run background and scheduled tasks, and Celery is the perfect tool for that.
On Windows, background processes are mostly run as Windows Services. Fortunately, Python for Windows Extensions (a.k.a pywin32) provides facilities to create a Windows Service.</description></item><item><title>Running Django Under Windows With Iis Using Fcgi</title><link>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</link><pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</guid><description>Update: The configuration process described in this post can be achieved with only one management command if you install the django-windows-tools application.
Windows is probably not the best production environment for Django but sometimes one doesn&amp;rsquo;t have the choice. In that case, a few options aleardy exist, most notably the one developed by helicontech that relies on Microsoft&amp;rsquo;s Web Platform Installer. This solution, which is described here, relies on the installation of a specific native Handler developed by Helicontech.</description></item></channel></rss>