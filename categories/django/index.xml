<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Django - Category - mrtn.me</title><link>http://mrtn.me/categories/django/</link><description>Django - Category - mrtn.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Wed, 04 Jul 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://mrtn.me/categories/django/" rel="self" type="application/rss+xml"/><item><title>Django on Windows: Run Celery as a Windows Service</title><link>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</guid><description>In my previous post, I showed how to set up a Django project on a Windows Server to be served behind IIS. After setting up the server, the next thing we want with a Django application is to be able to run background and scheduled tasks, and Celery is the perfect tool for that.
On Windows, background processes are mostly run as Windows Services. Fortunately, Python for Windows Extensions (a.k.a pywin32) provides facilities to create a Windows Service.</description></item><item><title>Running Django Under Windows With Iis Using Fcgi</title><link>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</link><pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</guid><description>Update: The configuration process described in this post can be achieved with only one management command if you install the django-windows-tools application.
Windows is probably not the best production environment for Django but sometimes one doesn&amp;rsquo;t have the choice. In that case, a few options aleardy exist, most notably the one developed by helicontech that relies on Microsoft&amp;rsquo;s Web Platform Installer. This solution, which is described here, relies on the installation of a specific native Handler developed by Helicontech.</description></item><item><title>Start a Virtualenv Django Shell From the Linux Desktop</title><link>http://mrtn.me/posts/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/</link><pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/</guid><description>If you are tired to fire a terminal window, cd to your project directory and activate your python virtualenv to get to your Django project, you will find here some tips to improve things a little bit.
This tip is divided in two parts :
First we create a shell startup script that activates the virtualenv, bash completion and cd in the project directory. Then we create a Linux Desktop Entry file That spawns a console in our environment.</description></item><item><title>Checking Google Play Signatures With Django</title><link>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</link><pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</guid><description>Google play, formerly known as the Android Market, provides in-app billing in several countries. In the Security and Design page, Google states the following:
If practical, you should perform signature verification on a remote server and not on a device. Implementing the verification process on a server makes it difficult for attackers to break the verification process by reverse engineering your .apk file. If you do offload security processing to a remote server, be sure that the device-server handshake is secure.</description></item></channel></rss>