<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on mrtn.me</title><link>http://mrtn.me/categories/android/</link><description>Recent content in Android on mrtn.me</description><generator>Hugo</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Wed, 30 Jul 2025 18:39:54 +0200</lastBuildDate><atom:link href="http://mrtn.me/categories/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Checking Google Play Signatures on .Net</title><link>http://mrtn.me/posts/2012/11/15/checking-google-play-signatures-on-net/</link><pubDate>Thu, 15 Nov 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/11/15/checking-google-play-signatures-on-net/</guid><description>&lt;p>With
&lt;a href="http://developer.android.com/guide/google/play/billing/billing_integrate.html" target="_blank" rel="noopener noreffer ">In-App Billing&lt;/a>
on Android, each time a purchase occurs, your application receives a JSON
payload containing information about the purchase, as well as its signature with
your developer certificate.&lt;/p>
&lt;p>Google encourages you to verify that the signature is valid to authentify the
purchase. You can do that inside the application, but if the delivery of the
purchase involves a server, it is better to do it on the server to prevent
client code manipulation. The following show how to do it on .Net server
application.&lt;/p></description></item><item><title>Avoid Thread Issues While Testing an Android Service</title><link>http://mrtn.me/posts/2012/11/08/avoid-thread-issues-while-testing-an-android-service/</link><pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/11/08/avoid-thread-issues-while-testing-an-android-service/</guid><description>&lt;p>The
&lt;a href="http://developer.android.com/tools/testing/testing_android.html" target="_blank" rel="noopener noreffer ">Android Test Framework&lt;/a>
provides many tools to test parts of an Android application, and the
&lt;a href="http://developer.android.com/reference/android/test/ServiceTestCase.html" target="_blank" rel="noopener noreffer ">ServiceTestCase&lt;/a>
in particular to test your
&lt;a href="http://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener noreffer ">Service&lt;/a>
classes.&lt;/p>
&lt;p>This class is quite useful but you may find yourself scratching your head
because your test does not work like it should. This happens in particular if
you&amp;rsquo;re doing some background work in your service, relying for example on
&lt;a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="noopener noreffer ">AsyncTask&lt;/a>
for it.&lt;/p>
&lt;p>Read on if you want to understand why it doesn&amp;rsquo;t work and find a solution for
it.&lt;/p></description></item><item><title>Unlock and Root a Nexus Device</title><link>http://mrtn.me/posts/2012/10/25/unlock-and-root-a-nexus-device/</link><pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/10/25/unlock-and-root-a-nexus-device/</guid><description>&lt;p>Having an unlocked and rooted device provides several advantages :&lt;/p>
&lt;ul>
&lt;li>Easy backup and restore with Nandroid backup,&lt;/li>
&lt;li>Easy firmware replacement and updates installation,&lt;/li>
&lt;li>Advanced debugging capabilities.&lt;/li>
&lt;/ul>
&lt;p>The following instructions allow unlocking and rooting a Nexus device (Galaxy
Nexus, Nexus 7) from the command line on a Linux machine. It involves:&lt;/p>
&lt;ul>
&lt;li>Backuping your device,&lt;/li>
&lt;li>Unlocking the bootloader,&lt;/li>
&lt;li>Restoring the backup,&lt;/li>
&lt;li>Rooting the device.&lt;/li>
&lt;/ul>
&lt;!-- More -->
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>Here is the list of prerequisites :&lt;/p></description></item><item><title>Using Eclipse Templates to Ease Android Logging</title><link>http://mrtn.me/posts/2012/03/24/using-eclipse-templates-to-ease-android-logging/</link><pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/03/24/using-eclipse-templates-to-ease-android-logging/</guid><description>&lt;p>Adding logs to your Android source code is sometimes the only way to really
understand what happens , especially in asynchronous situations.&lt;/p>
&lt;p>If you are lazy like me, you may insert &lt;em>lazy logs&lt;/em> like this one:&lt;/p>
&lt;div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
 &lt;div class="code-header language-java">
 &lt;span class="code-title">&lt;i class="arrow fas fa-angle-right fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;span class="ellipses">&lt;i class="fas fa-ellipsis-h fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;span class="copy" title="Copy to clipboard">&lt;i class="far fa-copy fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;#LOOK#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;onStart()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;p>Instead of having less lazy code like:&lt;/p>
&lt;div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
 &lt;div class="code-header language-java">
 &lt;span class="code-title">&lt;i class="arrow fas fa-angle-right fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;span class="ellipses">&lt;i class="fas fa-ellipsis-h fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;span class="copy" title="Copy to clipboard">&lt;i class="far fa-copy fa-fw" aria-hidden="true">&lt;/i>&lt;/span>
 &lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SomeActivity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Activity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOG_TAG&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SomeActivity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOG_LEVEL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">VERBOSE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onStart&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LOG_LEVEL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">VERBOSE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LOG_TAG&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;onStart()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;p>But Eclipse can easily help you to avoid this and then the need to clean up your
code after debbuging.&lt;/p></description></item><item><title>Get the Height of the Status Bar in Android</title><link>http://mrtn.me/posts/2012/03/17/get-the-height-of-the-status-bar-in-android/</link><pubDate>Sat, 17 Mar 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/03/17/get-the-height-of-the-status-bar-in-android/</guid><description>&lt;p>Sometimes in Android, the flexible layout system is not flexible enough and you
need to make some computations inside your code. In these computations, you may
need to subtract the size of the status bar. Stackoverflow gives you
&lt;a href="http://stackoverflow.com/questions/3407256/height-of-status-bar-in-android" target="_blank" rel="noopener noreffer ">some answers&lt;/a>,
but they all rely on the fact that te status bar is shown at the time you make
your computation. If you are in full screen mode, by having called for instance:&lt;/p></description></item><item><title>Checking Google Play Signatures With Django</title><link>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</link><pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</guid><description>&lt;p>Google play, formerly known as the Android Market, provides in-app billing in
several countries. In the
&lt;a href="http://developer.android.com/guide/market/billing/billing_best_practices.html" target="_blank" rel="noopener noreffer ">Security and Design&lt;/a>
page, Google states the following:&lt;/p>
&lt;blockquote>
&lt;p>If practical, you should perform signature verification on a remote server and
not on a device. Implementing the verification process on a server makes it
difficult for attackers to break the verification process by reverse
engineering your .apk file. If you do offload security processing to a remote
server, be sure that the device-server handshake is secure.&lt;/p></description></item></channel></rss>