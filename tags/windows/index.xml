<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Windows on mrtn.me</title><link>http://mrtn.me/tags/windows/</link><description>Recent content in Windows on mrtn.me</description><generator>Hugo</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Mon, 11 Aug 2025 12:54:45 +0200</lastBuildDate><atom:link href="http://mrtn.me/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>Transferring WSL Home Directories Between Distributions</title><link>http://mrtn.me/posts/2025/08/11/transferring-wsl-home-directories-between-distributions/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2025/08/11/transferring-wsl-home-directories-between-distributions/</guid><description>&lt;p>When upgrading to a new version of a Linux distribution in WSL or switching
between different distributions, transferring your carefully configured home
directory can be a challenge. This post presents a practical solution using
rsync and WSL&amp;rsquo;s inter-distribution mounting capabilities to seamlessly transfer
your development environment.&lt;/p>
&lt;!-- more -->
&lt;h2 id="the-challenge">The Challenge&lt;/h2>
&lt;p>WSL distributions are isolated from each other, making it difficult to transfer
files directly. Traditional backup and restore approaches using tar archives
work but have limitations:&lt;/p></description></item><item><title>Debugging a failing OpenStack image</title><link>http://mrtn.me/posts/2023/01/13/debugging-a-failing-openstack-image/</link><pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2023/01/13/debugging-a-failing-openstack-image/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>On my
&lt;a href="https://github.com/antoinemartin/alpine-openstack-vm" target="_blank" rel="noopener noreffer ">alpine-openstack-vm&lt;/a>
project, There is a CI process producing a VM image for OpenStack. The process
involves testing that the machine boots.
&lt;a href="https://github.com/antoinemartin/alpine-openstack-vm/actions/runs/3909412713" target="_blank" rel="noopener noreffer ">The test fails&lt;/a>,
but the machine is actually booted. What doesn’t work is the ssh access. As the
machine can only be reached via SSH with a private key for obvious security
reasons, not having access prevents proper debug.&lt;/p>
&lt;h2 id="the-objective">The objective&lt;/h2>
&lt;p>The objective is to be able to run the produced VM locally to assess the issue.
As the image in its current form doesn’t work, the VM image needs to be slightly
modified in order to allow access. If the VM is run locally, adding a root
password should be sufficient.&lt;/p></description></item><item><title>Multiple Docker environments on Windows</title><link>http://mrtn.me/posts/2022/05/11/multiple-docker-environments-on-windows/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2022/05/11/multiple-docker-environments-on-windows/</guid><description>&lt;p>On Windows and docker platforms, your docker environment tends to get messy as
time goes by.&lt;/p>
&lt;p>You can start over from a clean sheet with &lt;code>docker system prune --all&lt;/code> but
sometimes you would like to keep some images around. This post shows how to set
up multiple docker environments on Windows with the help of WSL2 (Windows
Subsystem For Linux) and Alpine.&lt;/p>
&lt;!-- more -->
&lt;h2 id="how-it-works">How it works&lt;/h2>
&lt;p>The idea is to run docker on WSL and use a &lt;code>docker&lt;/code> alias on the windows side to
invoke the docker command in the WSL distribution. This is a well-known usage
pattern &lt;a href="https://docs.docker.com/desktop/windows/wsl/" target="_blank" rel="noopener noreffer ">with&lt;/a> or
&lt;a href="https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9" target="_blank" rel="noopener noreffer ">without&lt;/a>
Docker desktop.&lt;/p></description></item><item><title>Django on Windows: Run Celery as a Windows Service</title><link>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</guid><description>&lt;p>In my
&lt;a href="http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/" rel="">previous post&lt;/a>,
I showed how to set up a Django project on a Windows Server to be served behind
IIS. After setting up the server, the next thing we want with a Django
application is to be able to run background and scheduled tasks, and
&lt;a href="http://celeryproject.org/" target="_blank" rel="noopener noreffer ">Celery&lt;/a> is the perfect tool for that.&lt;/p>
&lt;!-- more -->
&lt;p>On Windows, background processes are mostly run as Windows Services.
Fortunately,
&lt;a href="http://sourceforge.net/projects/pywin32/" target="_blank" rel="noopener noreffer ">Python for Windows Extensions&lt;/a> (a.k.a
pywin32) provides facilities to create a Windows Service.&lt;/p></description></item><item><title>Running Django Under Windows With Iis Using Fcgi</title><link>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</link><pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</guid><description>&lt;p>&lt;strong>Update&lt;/strong>: The configuration process described in this post can be achieved
with only one management command if you install the
&lt;a href="https://github.com/antoinemartin/django-windows-tools" target="_blank" rel="noopener noreffer ">django-windows-tools application&lt;/a>.&lt;/p>
&lt;p>Windows is probably not the best production environment for
&lt;a href="https://www.djangoproject.com/" target="_blank" rel="noopener noreffer ">Django&lt;/a> but sometimes one doesn&amp;rsquo;t have the
choice. In that case, a few options aleardy exist, most notably the one
developed by &lt;a href="http://www.helicontech.com/" target="_blank" rel="noopener noreffer ">helicontech&lt;/a> that relies on
Microsoft&amp;rsquo;s
&lt;a href="http://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="noopener noreffer ">Web Platform Installer&lt;/a>.
This solution, which is described
&lt;a href="http://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="noopener noreffer ">here&lt;/a>, relies on the
installation of a specific native Handler developed by Helicontech.&lt;/p></description></item></channel></rss>