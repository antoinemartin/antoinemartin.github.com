<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>windows - Tag - mrtn.me</title><link>http://mrtn.me/tags/windows/</link><description>windows - Tag - mrtn.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Wed, 11 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://mrtn.me/tags/windows/" rel="self" type="application/rss+xml"/><item><title>Multiple Docker environments on Windows</title><link>http://mrtn.me/posts/2022/05/11/multiple-docker-environments-on-windows/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2022/05/11/multiple-docker-environments-on-windows/</guid><description>On Windows and docker platforms, your docker enviornment tends to get messy as time goes by.
You can start over from a clean sheet with docker system prune --all but sometimes you would like to keep some images around. This post shows how to set up multiple docker environments on Windows with the help of WSL2 (Windows Subsystem For Linux) and Alpine.
How it works The idea is to run docker on WSL and use a docker alias on the windows side to invoke the docker command in the WSL distribution.</description></item><item><title>Django on Windows: Run Celery as a Windows Service</title><link>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</guid><description>In my previous post, I showed how to set up a Django project on a Windows Server to be served behind IIS. After setting up the server, the next thing we want with a Django application is to be able to run background and scheduled tasks, and Celery is the perfect tool for that.
On Windows, background processes are mostly run as Windows Services. Fortunately, Python for Windows Extensions (a.k.a pywin32) provides facilities to create a Windows Service.</description></item><item><title>Running Django Under Windows With Iis Using Fcgi</title><link>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</link><pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</guid><description>Update: The configuration process described in this post can be achieved with only one management command if you install the django-windows-tools application.
Windows is probably not the best production environment for Django but sometimes one doesn&amp;rsquo;t have the choice. In that case, a few options aleardy exist, most notably the one developed by helicontech that relies on Microsoft&amp;rsquo;s Web Platform Installer. This solution, which is described here, relies on the installation of a specific native Handler developed by Helicontech.</description></item></channel></rss>