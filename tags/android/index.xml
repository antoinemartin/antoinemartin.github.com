<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>android - Tag - mrtn.me</title><link>http://mrtn.me/tags/android/</link><description>android - Tag - mrtn.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Thu, 15 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://mrtn.me/tags/android/" rel="self" type="application/rss+xml"/><item><title>Checking Google Play Signatures on .Net</title><link>http://mrtn.me/posts/2012/11/15/checking-google-play-signatures-on-net/</link><pubDate>Thu, 15 Nov 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/11/15/checking-google-play-signatures-on-net/</guid><description>With In-App Billing on Android, each time a purchase occurs, your application receives a JSON payload containing information about the purchase, as well as its signature with your developer certificate.
Google encourages you to verify that the signature is valid to authentify the purchase. You can do that inside the application, but if the delivery of the purchase involves a server, it is better to do it on the server to prevent client code manipulation.</description></item><item><title>Avoid Thread Issues While Testing an Android Service</title><link>http://mrtn.me/posts/2012/11/08/avoid-thread-issues-while-testing-an-android-service/</link><pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/11/08/avoid-thread-issues-while-testing-an-android-service/</guid><description><![CDATA[<p>The
<a href="http://developer.android.com/tools/testing/testing_android.html" target="_blank" rel="noopener noreffer">Android Test Framework</a>
provides many tools to test parts of an Android application, and the
<a href="http://developer.android.com/reference/android/test/ServiceTestCase.html" target="_blank" rel="noopener noreffer">ServiceTestCase</a>
in particular to test your
<a href="http://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener noreffer">Service</a>
classes.</p>
<p>This class is quite useful but you may find yourself scratching your head
because your test does not work like it should. This happens in particular if
you&rsquo;re doing some background work in your service, relying for example on
<a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="noopener noreffer">AsyncTask</a>
for it.</p>
<p>Read on if you want to understand why it doesn&rsquo;t work and find a solution for
it.</p>]]></description></item><item><title>Unlock and Root a Nexus Device</title><link>http://mrtn.me/posts/2012/10/25/unlock-and-root-a-nexus-device/</link><pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/10/25/unlock-and-root-a-nexus-device/</guid><description>Having an unlocked and rooted device provides several advantages :
Easy backup and restore with Nandroid backup, Easy firmware replacement and updates installation, Advanced debugging capabilities. The following instructions allow unlocking and rooting a Nexus device (Galaxy Nexus, Nexus 7) from the command line on a Linux machine. It involves:
Backuping your device, Unlocking the bootloader, Restoring the backup, Rooting the device. Prerequisites Here is the list of prerequisites :</description></item><item><title>Using Eclipse Templates to Ease Android Logging</title><link>http://mrtn.me/posts/2012/03/24/using-eclipse-templates-to-ease-android-logging/</link><pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/03/24/using-eclipse-templates-to-ease-android-logging/</guid><description><![CDATA[Adding logs to your Android source code is sometimes the only way to really understand what happens , especially in asynchronous situations.
If you are lazy like me, you may insert lazy logs like this one:
1  Log.v(&#34;#LOOK#&#34;, &#34;onStart()&#34;);   Instead of having less lazy code like:
1 2 3 4 5 6 7 8 9 10  public class SomeActivity extends Activity { private static final String LOG_TAG = SomeActivity.]]></description></item><item><title>Get the Height of the Status Bar in Android</title><link>http://mrtn.me/posts/2012/03/17/get-the-height-of-the-status-bar-in-android/</link><pubDate>Sat, 17 Mar 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/03/17/get-the-height-of-the-status-bar-in-android/</guid><description>Sometimes in Android, the flexible layout system is not flexible enough and you need to make some computations inside your code. In these computations, you may need to subtract the size of the status bar. Stackoverflow gives you some answers, but they all rely on the fact that te status bar is shown at the time you make your computation. If you are in full screen mode, by having called for instance:</description></item><item><title>Checking Google Play Signatures With Django</title><link>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</link><pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate><author>Antoine Martin</author><guid>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</guid><description>Google play, formerly known as the Android Market, provides in-app billing in several countries. In the Security and Design page, Google states the following:
If practical, you should perform signature verification on a remote server and not on a device. Implementing the verification process on a server makes it difficult for attackers to break the verification process by reverse engineering your .apk file. If you do offload security processing to a remote server, be sure that the device-server handshake is secure.</description></item></channel></rss>