<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on mrtn.me</title><link>http://mrtn.me/tags/django/</link><description>Recent content in Django on mrtn.me</description><generator>Hugo</generator><language>en-us</language><managingEditor>antoine@mrtn.me (Antoine Martin)</managingEditor><webMaster>antoine@mrtn.me (Antoine Martin)</webMaster><lastBuildDate>Wed, 30 Jul 2025 18:39:54 +0200</lastBuildDate><atom:link href="http://mrtn.me/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django on Windows: Run Celery as a Windows Service</title><link>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</link><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/07/04/django-on-windows-run-celery-as-a-windows-service/</guid><description>&lt;p>In my
&lt;a href="http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/" rel="">previous post&lt;/a>,
I showed how to set up a Django project on a Windows Server to be served behind
IIS. After setting up the server, the next thing we want with a Django
application is to be able to run background and scheduled tasks, and
&lt;a href="http://celeryproject.org/" target="_blank" rel="noopener noreffer ">Celery&lt;/a> is the perfect tool for that.&lt;/p>
&lt;!-- more -->
&lt;p>On Windows, background processes are mostly run as Windows Services.
Fortunately,
&lt;a href="http://sourceforge.net/projects/pywin32/" target="_blank" rel="noopener noreffer ">Python for Windows Extensions&lt;/a> (a.k.a
pywin32) provides facilities to create a Windows Service.&lt;/p></description></item><item><title>Running Django Under Windows With Iis Using Fcgi</title><link>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</link><pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/06/27/running-django-under-windows-with-iis-using-fcgi/</guid><description>&lt;p>&lt;strong>Update&lt;/strong>: The configuration process described in this post can be achieved
with only one management command if you install the
&lt;a href="https://github.com/antoinemartin/django-windows-tools" target="_blank" rel="noopener noreffer ">django-windows-tools application&lt;/a>.&lt;/p>
&lt;p>Windows is probably not the best production environment for
&lt;a href="https://www.djangoproject.com/" target="_blank" rel="noopener noreffer ">Django&lt;/a> but sometimes one doesn&amp;rsquo;t have the
choice. In that case, a few options aleardy exist, most notably the one
developed by &lt;a href="http://www.helicontech.com/" target="_blank" rel="noopener noreffer ">helicontech&lt;/a> that relies on
Microsoft&amp;rsquo;s
&lt;a href="http://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="noopener noreffer ">Web Platform Installer&lt;/a>.
This solution, which is described
&lt;a href="http://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="noopener noreffer ">here&lt;/a>, relies on the
installation of a specific native Handler developed by Helicontech.&lt;/p></description></item><item><title>Start a Virtualenv Django Shell From the Linux Desktop</title><link>http://mrtn.me/posts/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/</link><pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/</guid><description>&lt;p>If you are tired to fire a terminal window, &lt;code>cd&lt;/code> to your project directory and
activate your python &lt;code>virtualenv&lt;/code> to get to your Django project, you will find
here some tips to improve things a little bit.&lt;/p>
&lt;!-- more -->
&lt;p>This tip is divided in two parts :&lt;/p>
&lt;ol>
&lt;li>First we create a shell startup script that &lt;em>activates&lt;/em> the &lt;code>virtualenv&lt;/code>,
bash completion and &lt;code>cd&lt;/code> in the project directory.&lt;/li>
&lt;li>Then we create a
&lt;a href="http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html" target="_blank" rel="noopener noreffer ">Linux Desktop Entry&lt;/a>
file That spawns a console in our environment.&lt;/li>
&lt;/ol>
&lt;p>Here you have the startup script:&lt;/p></description></item><item><title>Checking Google Play Signatures With Django</title><link>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</link><pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate><author>antoine@mrtn.me (Antoine Martin)</author><guid>http://mrtn.me/posts/2012/03/12/checking-google-play-signatures-with-django/</guid><description>&lt;p>Google play, formerly known as the Android Market, provides in-app billing in
several countries. In the
&lt;a href="http://developer.android.com/guide/market/billing/billing_best_practices.html" target="_blank" rel="noopener noreffer ">Security and Design&lt;/a>
page, Google states the following:&lt;/p>
&lt;blockquote>
&lt;p>If practical, you should perform signature verification on a remote server and
not on a device. Implementing the verification process on a server makes it
difficult for attackers to break the verification process by reverse
engineering your .apk file. If you do offload security processing to a remote
server, be sure that the device-server handshake is secure.&lt;/p></description></item></channel></rss>