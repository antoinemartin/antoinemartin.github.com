<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Geek Quickies]]></title>
  <link href="http://mrtn.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mrtn.me/"/>
  <updated>2012-11-15T15:28:19+01:00</updated>
  <id>http://mrtn.me/</id>
  <author>
    <name><![CDATA[Antoine Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unlock and root a Nexus device]]></title>
    <link href="http://mrtn.me/blog/2012/10/25/unlock-and-root-a-nexus-device/"/>
    <updated>2012-10-25T07:51:00+02:00</updated>
    <id>http://mrtn.me/blog/2012/10/25/unlock-and-root-a-nexus-device</id>
    <content type="html"><![CDATA[<p>Having an unlocked and rooted device provides several advantages :</p>

<ul>
<li>Easy backup and restore with Nandroid backup,</li>
<li>Easy firmware replacement and updates installation,</li>
<li>Advanced debugging capabilities.</li>
</ul>


<p>The following instructions allow unlocking and rooting a Nexus device (Galaxy
Nexus, Nexus 7) from the command line on a Linux machine. It involves:</p>

<ul>
<li>Backuping your device,</li>
<li>Unlocking the bootloader,</li>
<li>Restoring the backup,</li>
<li>Rooting the device.</li>
</ul>


<!-- More -->


<h3>Prerequisites</h3>

<p>Here is the list of prerequisites :</p>

<ul>
<li><a href="http://developer.android.com/sdk/index.html">Android SDK</a>, to have access to <code>adb</code> and <code>fastboot</code>.</li>
<li><a href="http://download2.clockworkmod.com/recoveries/recovery-clockwork-6.0.1.0-grouper.img">Clockwork Mode (CWM) </a> recovery image.</li>
<li><a href="http://download.chainfire.eu/212/SuperSU/CWM-SuperSU-v0.96.zip">SuperSU</a> installable zip.</li>
</ul>


<p>The <code>platform-tools</code> directory of the Android SDK must be on your <code>PATH</code>, and
the device must have USB debugging enabled.</p>

<h3>Udev rules</h3>

<p>On Linux, you don't have to install any driver. You need however to enable
access for your users. Depending on your distribution, you may have a package
handling that, but if not, here is a quick way to give access to your user to
the device (here <code>antoine</code>). Type as <code>root</code>:</p>

<p><code>sh
[root@dev ~] $ cd /etc/udev/rules.d
[root@dev rules.d] $ wget https://raw.github.com/M0Rf30/android-udev-rules/master/51-android.rules
[root@dev rules.d] $ groupadd adbusers
[root@dev rules.d] $ udevadm control --reload-rules
[root@dev rules.d] $ gpasswd -a antoine adbusers
</code></p>

<p>Plug your device on the USB cable, and you should be able to see it with <code>adb</code>:</p>

<p><code>sh
[antoine@dev nexus] $ adb devices                                                                                                                                                                                                                                                    
List of devices attached                                                                                                                                                                                                                                                        
015d2ebecd341e06        device                                                                                                                                                                                                                                                  
</code></p>

<h3>Backup</h3>

<p>Unlocking the bootloader wipes all the data on the device. If you're not doing
this on a new device, you may want to backup and restore your data and
applications. With the device connected in USB debug mode, type :</p>

<p><code>sh
[antoine@dev nexus] $ adb backup -apk -shared -all -f backup.ab
</code></p>

<p>Depending on the amount of data you have on your device, this process can be
quite long.</p>

<h3>OEM unlock</h3>

<p>Unlocking the device is easy. With the device connected in USB debug mode, type:</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
</code></p>

<p>The device will reboot in <em>fastboot</em> mode. To check this, type:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot devices
015d2ebecd341e06        fastboot
</code>
You will see your device in the list. Then you can unlock it by typing:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot oem unlock
...
(bootloader) erasing userdata...
(bootloader) erasing userdata done
(bootloader) erasing cache...
(bootloader) erasing cache done
(bootloader) unlocking...
(bootloader) Bootloader is unlocked now.
OKAY [ 54.821s]
finished. total time: 54.821s
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>At the end of the process, reboot your device:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>You will go through the initialization process in the device.</p>

<h3>Restore</h3>

<p>Once the device is up and running, you can restore your data with:</p>

<p><code>sh
[antoine@dev nexus] $ adb restore backup.ab
</code></p>

<h3>Root</h3>

<p>To root the device, we will apply the SuperSU installable zip as an update in
CWM.</p>

<p>First we push the SuperSU installable zip in the device filesystem:</p>

<p><code>sh
[antoine@dev nexus] $ adb push CWM-SuperSU-v0.96.zip /sdcard/update.zip
752 KB/s (674673 bytes in 0.875s)
</code></p>

<p>Now that the device is unlocked, we can boot it into CWM. We first reboot it in
fastboot mode:</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
</code></p>

<p>And then boot it with CWM:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot boot recovery-clockwork-6.0.1.0-grouper.img
downloading 'boot.img'...
OKAY [  0.800s]
booting...
OKAY [  0.020s]
finished. total time: 0.820s
</code></p>

<p>After a few seconds, the device will show the CWM interface. With the volume
buttons, move to the <code>install zip from sdcard</code> option and select it by pushing
the power button.</p>

<p>On the new menu that appears, choose the <code>apply /sdcard/update.zip</code> option and
scroll down to the <code>Yes</code> option. click on the power button and SuperSU will
be installed.</p>

<p>Once done, you can go back to the main CWM menu and reboot the device.</p>

<h3>Permanently install CWM</h3>

<p>You can permanetly install CWM on the device recovery partition so that
you can start your device in CWM without being connected via USB.</p>

<p>Your device automatically restores the recovery partition at each boot. To avoid
that, you need to delete the <code>/system/recovery-from-boot.p</code> file on the
device :</p>

<p><code>sh
[antoine@dev nexus] $ adb shell
shell@android:/ $ su
shell@android:/ # rm /system/recovery-from-boot.p
shell@android:/ # exit
shell@android:/ $ exit
</code></p>

<p>You can then reboot in fastboot mode and install CWM permanetly :</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
[antoine@dev nexus] $ fastboot flash recovery recovery-clockwork-touch-6.0.0.6-grouper.img
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>I personally don't recommend to install CWM permanetly as it will prevent you
from installing the OTA updates that are pushed to your device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly deploy a Git project on a server with SSH]]></title>
    <link href="http://mrtn.me/blog/2012/10/24/quickly-deploy-a-git-project-on-a-server-with-ssh/"/>
    <updated>2012-10-24T13:23:00+02:00</updated>
    <id>http://mrtn.me/blog/2012/10/24/quickly-deploy-a-git-project-on-a-server-with-ssh</id>
    <content type="html"><![CDATA[<p>So you have this brand new project <code>my_project</code> of yours with your local Git
repository set up and you want to quickly make it available for others to clone
on your repository server.</p>

<p>All your projects are located in your server <code>git.mycompany.com</code> under
<code>/srv/git</code>. You're using the user named <code>git</code> to connect to your server with
the SSH private key located in <code>~/.ssh/git</code>.</p>

<p>Here is the quickiest way to deploy your projet:</p>

<!-- More -->


<p>You first add your SSH key to the SSH agent :</p>

<p><code>sh
[antoine@dev my_project] $ ssh-add ~/.ssh/git
</code></p>

<p>If the agent is not started, you need to execute first :
<code>sh
[antoine@dev my_project] $ eval `ssh-agent`
</code></p>

<p>Then you create an empty Git bare repository on your server with the name of
your project :</p>

<p><code>sh
[antoine@dev my_project] $ ssh git@git.mycompany.com "git --bare init /srv/git/$(basename $(pwd)).git"
Initialized empty Git repository in /srv/git/my_project.git/
</code></p>

<p>Then you add your newly created remote Git repository as the origin of your
local repo :</p>

<p><code>sh
[antoine@dev my_project] $ git remote add origin "git@git.mycompany.com:/srv/git/$(basename $(pwd)).git"
</code></p>

<p>You push your master branch to the remote repository :</p>

<p><code>sh
[antoine@dev my_project] $ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 209 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@git.mycompany.com:/srv/git/my_project.git
 * [new branch]      master -&gt; master
</code></p>

<p>Lastly, you make your local branch track your remote branch :</p>

<p><code>sh
[antoine@dev my_project] $ git branch --set-upstream master origin/master
Branch master set up to track remote branch master from origin.
</code></p>

<p>The last two steps can be done for any local branch you have that you want to
push on the server.</p>

<p>You can test pulling from the server :</p>

<p><code>sh
[antoine@dev my_project] $ git pull
Already up-to-date.
</code></p>

<p>That's it !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Redmine on CentOS 6.2 wiht MySQL and Apache]]></title>
    <link href="http://mrtn.me/blog/2012/07/06/installing-redmine-on-centos-6-dot-2-wiht-mysql-and-apache/"/>
    <updated>2012-07-06T17:56:00+02:00</updated>
    <id>http://mrtn.me/blog/2012/07/06/installing-redmine-on-centos-6-dot-2-wiht-mysql-and-apache</id>
    <content type="html"><![CDATA[<p>I needed recently to install the excellent project management tool
<a href="http://www.redmine.org/">Redmine</a> on a <a href="http://www.centos.org/">CentOS</a>
 6.2 machine. There are some tutorials on the Web (<a href="http://www.redmine.org/projects/redmine/wiki/How_to_Install_Redmine_on_CentOS_%28Detailed%29">here</a>
or <a href="http://luzem.dyndns.org/2011/04/14/install-redmine-in-rhel6-and-rh-based-distributions/">here</a>)
but they are a little bit outdated. The following is a method that works as of
today.</p>

<!-- More -->


<h2>Pre-requisites</h2>

<p>Logged as root, install the following packages:</p>

<p><code>sh
yum install make gcc gcc-c++ zlib-devel ruby-devel rubygems ruby-libs apr-devel apr-util-devel httpd-devel mysql-devel mysql-server automake autoconf ImageMagick ImageMagick-devel curl-devel
</code></p>

<p>And then install the <code>bundle</code> ruby gem:</p>

<p><code>sh
gem install bundle
</code></p>

<h2>Install Redmine</h2>

<p>Redmine is installed with the following commmands:</p>

<p><code>sh
cd /var/www
wget http://rubyforge.org/frs/download.php/76255/redmine-1.4.4.tar.gz
tar zxf redmine-1.4.4.tar.gz
ln -s redmine-1.4.4 redmine
rm -f redmine-1.4.4.tar.gz
</code></p>

<h2>Install Redmine ruby dependencies</h2>

<p>Bundle helps us install the ruby Redmine dependencies:</p>

<p><code>sh
cd /var/www/redmine
bundle install --without postgresql sqlite test development
</code></p>

<h2>Database creation</h2>

<p>First we start MySQL:</p>

<p><code>sh
service mysqld start
</code></p>

<p>Then we secure it (Optional):</p>

<p><code>sh
mysql_secure_installation
</code></p>

<p>We then create the redmine database and user:</p>

<p><code>sh
$ mysql
mysql&gt; create database redmine character set utf8;
mysql&gt; grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'my_password';
mysql&gt; flush privileges;
mysql&gt; quit
</code></p>

<h2>Redmine database configuration</h2>

<p>We copy the database configuration example and we modify it to point to our
newly created database:</p>

<p><code>sh
cd /var/www/redmine/config
copy database.yml.example database.yml
</code></p>

<p>On the <code>database.yml</code> file, the <code>production</code> section should look like this:</p>

<p>``` yaml
production:
  adapter: mysql
  database: redmine
  host: localhost
  username: redmine
  password: my_password
  encoding: utf8</p>

<p>```</p>

<p>And then we create and populate the database with the following rake commands:</p>

<p><code>sh
cd /var/www/redmine
rake generate_session_store
rake db:migrate RAILS_ENV="production"
rake redmine:load_default_data RAILS_ENV="production"
</code></p>

<h2>Outgoing email configuration (Optional)</h2>

<p>To configure an outgoing SMTP server for sending emails, we create the
<code>config/configuration.yml</code> file from the sample:</p>

<p><code>sh
cd /var/www/redmine/config
cp configuration.yml.example configuration.yml
</code></p>

<p>And edit it to provide our configuration :</p>

<p>```yaml
production:
  email_delivery:</p>

<pre><code>delivery_method: :smtp
smtp_settings:
  address: "smtp.mydomain.com"
  port: 25
  domain: "mydomain.com"
</code></pre>

<p>```</p>

<h2>Redmine standalone testing</h2>

<p>At this point, Redmine can be tested in <em>standalone</em> mode by running the
following command:</p>

<p><code>sh
cd /var/www/redmine/
ruby script/server webrick -e production
</code></p>

<p>and open the <code>http://localhost:3000</code> addess in a browser. If you are testing
from another computer, you will need to open the port in the
<code>/etc/sysconfig/iptables</code> file by duplicating the ssh (port 22) line and
adapting it:</p>

<p><code>
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3000 -j ACCEPT
</code></p>

<p>Then apply the new configuration with the following command:</p>

<p><code>sh
service iptables restart
</code></p>

<h2>Passenger installation</h2>

<p>To install <a href="http://www.modrails.com/">Phusion passenger</a>, we firts install its
gem:</p>

<p><code>sh
gem install passenger
</code></p>

<p>And then install the Apache module with the command:</p>

<p><code>sh
passenger-install-apache2-module
</code></p>

<h2>Apache configuration</h2>

<p>We remove the default Apache configuration and replace it by a new one:</p>

<p><code>sh
cd /etc/httpd
mv conf.d available
mkdir conf.d
</code></p>

<p>In the empty new <code>conf.d</code> folder, we create a <code>redmine.conf</code> file with the
following configuration:</p>

<p>```</p>

<h1>Loading Passenger</h1>

<p>LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-3.0.13/ext/apache2/mod_passenger.so
PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-3.0.13
PassengerRuby /usr/bin/ruby</p>

<p><VirtualHost *:80>
   ServerName redmine.mycompany.com
   DocumentRoot /var/www/redmine/public
   <Directory /var/www/redmine/public></p>

<pre><code>  # This relaxes Apache security settings.
  AllowOverride all
  # MultiViews must be turned off.
  Options -MultiViews
  allow from all
</code></pre>

<p>   </Directory></p>

<p>   ErrorLog "|/usr/sbin/rotatelogs /etc/httpd/logs/redmine-error.%Y-%m-%d.log 86400"
   CustomLog "|/usr/sbin/rotatelogs /etc/httpd/logs/redmine-access.%Y-%m-%d.log 86400" "%h %l %u %t %D \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""</p>

<p></VirtualHost></p>

<p>```</p>

<p>We then enable named based virtual hosting for our server by <strong>uncomenting</strong> the
following line in the <code>/etc/httpd/conf/httpd.conf</code> file:</p>

<p>```
...
#</p>

<h1>Use name-based virtual hosting.</h1>

<p>#
NameVirtualHost *:80
...
```</p>

<p>We give full access on the redmine folder to the <code>apache</code> user and test the
configuration:</p>

<p><code>sh
chown -R apache:root /var/www/redmine
service httpd configtest
</code></p>

<p>At this point, the SELinux configuration needs to be modified to allow our
apache instance to run the phusion passenger module. You can do this by putting
SELinux in permissive mode:</p>

<p><code>sh
setenfore Permissive
</code></p>

<p>And letting the Permissive mode survive a reboot by modifyin the
<code>/etc/selinux/config</code> file from:</p>

<p><code>
SELINUX=enforcing
</code></p>

<p>to</p>

<p><code>
SELINUX=permissive
</code></p>

<p>If you want to run redmine while enforcing, you may want to apply the method
<a href="http://www.bangheadonwall.net/?p=343">described here</a> for which you will need
to install the <code>policycoreutils-python</code> package.</p>

<p>In any case, you will start Apache with the command:</p>

<p><code>sh
service httpd start
</code></p>

<p>Now you can access your Redmine installation with your browser. To access it
from all the computers in your network, you will need to open the port 80 in the
<code>/etc/sysconfig/iptables</code>. You can replace the 3000 rule by :</p>

<p><code>
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
</code></p>

<p>And restart iptables.</p>

<p><code>sh
service iptables restart
</code></p>

<h2>Start services at boot</h2>

<p>To have MySQL and Apache started at boot, run the commands:</p>

<p><code>sh
chkconfig --level 345 mysqld on
chkconfig --level 345 httpd on
</code></p>

<h2>Cleaning up</h2>

<p>A quick command to clean up all the <code>devel</code> stuff needed for installation:</p>

<p><code>sh
yum remove '*-devel' make automake autoconf
</code></p>

<h2>Tips</h2>

<p>Don't forget that if you change your Redmine configuration, you don't have to
restart Apache. Your can restart only Redmine with the command:</p>

<p><code>sh
touch /var/www/redmine/tmp/restart.txt
</code></p>

<p>If you restore data on your server from another redmine instance that runs on a
previous version, dont forget to migrate your data:</p>

<p><code>sh
cd /var/www/redmine
rake db:migrate RAILS_ENV="production"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a virtualenv Django shell from the Linux Desktop]]></title>
    <link href="http://mrtn.me/blog/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/"/>
    <updated>2012-03-13T07:58:00+01:00</updated>
    <id>http://mrtn.me/blog/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop</id>
    <content type="html"><![CDATA[<p>If you are tired to fire a terminal window, <code>cd</code> to your project directory and activate your python <code>virtualenv</code>
to get to your Django project, you will find here some tips to improve things a little bit.</p>

<!-- more -->


<p>This tip is divided in two parts :</p>

<ol>
<li>First we create a shell startup script that <em>activates</em> the <code>virtualenv</code>, bash completion and <code>cd</code> in the project directory.</li>
<li>Then we create a <a href="http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html">Linux Desktop Entry</a> file
That spawns a console in our environment.</li>
</ol>


<p>Here you have the startup script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Django startup script (.consolerc)</span> <a href='/downloads/code/.consolerc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The layout of the development environment is assumed to be:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &lt;pyton virtual env&gt;/</span>
</span><span class='line'><span class="c">#   src/</span>
</span><span class='line'><span class="c">#     &lt;project name&gt;/</span>
</span><span class='line'><span class="c">#       .consolerc (this file)</span>
</span><span class='line'><span class="c">#       setup.py</span>
</span><span class='line'><span class="c">#       ...</span>
</span><span class='line'><span class="c">#       &lt;project name&gt;/</span>
</span><span class='line'><span class="c">#         manage.py</span>
</span><span class='line'><span class="c">#         settings.py</span>
</span><span class='line'><span class="c">#         ...</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Run the standard bash rc file</span>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="c"># Get the current source file name</span>
</span><span class='line'><span class="nv">current</span><span class="o">=</span><span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Retrieve the source directory</span>
</span><span class='line'><span class="nv">DJANGO_SOURCE_DIR</span><span class="o">=</span><span class="s2">&quot;$(dirname &quot;</span><span class="k">$(</span>readlink -f <span class="s2">&quot;$current&quot;</span><span class="k">)</span><span class="s2">&quot;)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the Django related directories</span>
</span><span class='line'><span class="nv">DJANGO_PROJECT_NAME</span><span class="o">=</span><span class="s2">&quot;$(basename &quot;</span><span class="nv">$DJANGO_SOURCE_DIR</span><span class="s2">&quot;)&quot;</span>
</span><span class='line'><span class="nv">DJANGO_ENV_DIR</span><span class="o">=</span><span class="k">$(</span>readlink -f <span class="s2">&quot;${DJANGO_SOURCE_DIR}/../../&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">DJANGO_PROJECT_DIR</span><span class="o">=</span><span class="s2">&quot;${DJANGO_SOURCE_DIR}/${DJANGO_PROJECT_NAME}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Activate the environment</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;${DJANGO_ENV_DIR}/bin/activate&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$DJANGO_PROJECT_DIR&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:$(pwd)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Retrieve the Django bash completion file (only once) and execute it. </span>
</span><span class='line'><span class="c"># This is potentially insecure.</span>
</span><span class='line'><span class="nv">DJANGO_BASH_COMPLETION</span><span class="o">=</span><span class="s2">&quot;${DJANGO_SOURCE_DIR}/.django_bash_completion&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>curl http://code.djangoproject.com/svn/django/trunk/extras/django_bash_completion -o <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span> 2&gt;/dev/null
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Miscellaneous</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">runserver</span><span class="o">=</span><span class="s1">&#39;cd $DJANGO_PROJECT_DIR;manage.py runserver 0.0.0.0:8000&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The comment at the beginning explains how the project directory layout is assumed to be. That is the only assumption that makes the
script. In consequence, it is reusable <em>as is</em> in any other project.</p>

<p>Here is the <code>.desktop</code> file that runs a terminal console with our script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Django desktop file (Django.desktop)</span> <a href='/downloads/code/Django.desktop'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Desktop Entry<span class="o">]</span>
</span><span class='line'><span class="nv">Exec</span><span class="o">=</span>/bin/bash --rcfile .consolerc
</span><span class='line'>GenericName<span class="o">[</span>fr<span class="o">]=</span>MyProject Django
</span><span class='line'><span class="nv">GenericName</span><span class="o">=</span>MyProject Django
</span><span class='line'><span class="nv">Icon</span><span class="o">=</span>/home/antoine/images/django-icon_0.png
</span><span class='line'><span class="nv">MimeType</span><span class="o">=</span>
</span><span class='line'>Name<span class="o">[</span>fr<span class="o">]=</span>MyProject Django
</span><span class='line'><span class="nv">Name</span><span class="o">=</span>MyProject Django
</span><span class='line'><span class="nv">Path</span><span class="o">=</span>/home/antoine/src/django/my_project/src/my_project/
</span><span class='line'><span class="nv">StartupNotify</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">Terminal</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">TerminalOptions</span><span class="o">=</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>Application
</span><span class='line'><span class="nv">Categories</span><span class="o">=</span>Development
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The command runs in a terminal because of <code>Terminal=true</code>. You can see that apart from <code>Name</code> and <code>GenericName</code>, the only
line specific to the project is</p>

<p><code>
Path=/home/antoine/src/django/my_project/src/my_project/
</code></p>

<p>It defines the project path, making it easy to reuse. The execution of our init script is done through:</p>

<p><code>
Exec=/bin/bash --rcfile .consolerc
</code></p>

<p>The <code>Icon</code> is the familiar Django icon :</p>

<p><img src="/images/django-icon_0.png"></p>

<p>I personally put the <code>.desktop</code> file in <code>$HOME/Desktop</code>, but it also can reside in <code>$HOME/.local/share/applications</code>. In that
case, the entry will be available in the menu. I've tested this under KDE, but it should work also with Gnome.</p>
]]></content>
  </entry>
  
</feed>
