<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Geek Quickies]]></title>
  <link href="http://antoinemartin.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://antoinemartin.github.com/"/>
  <updated>2012-07-03T20:16:44+02:00</updated>
  <id>http://antoinemartin.github.com/</id>
  <author>
    <name><![CDATA[Antoine Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Eclipse templates to ease Android logging]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/24/using-eclipse-templates-to-ease-android-logging/"/>
    <updated>2012-03-24T07:26:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/24/using-eclipse-templates-to-ease-android-logging</id>
    <content type="html"><![CDATA[<p>Adding logs to your Android source code is sometimes the only way to really
understand what happens , especially in asynchronous situations.</p>

<p>If you are lazy like me, you may insert <em>lazy logs</em> like this one:</p>

<p><code>java
  Log.v("#LOOK#", "onStart()");
</code></p>

<p>Instead of having less lazy code like:</p>

<p>``` java
public class SomeActivity extends Activity {</p>

<pre><code>private static final String LOG_TAG = SomeActivity.class
        .getSimpleName();
private static final int LOG_LEVEL = Log.VERBOSE;
</code></pre>

<p>...</p>

<pre><code>@Override
public void onStart() {
    if (LOG_LEVEL &lt;= Log.VERBOSE)
        Log.v(LOG_TAG, "onStart()");
</code></pre>

<p>```</p>

<p>But Eclipse can easily help you to avoid this and then the need to clean up your
code after debbuging.</p>

<!-- more -->


<p>Everybody uses content assist in Eclipse. The <code>CTRL+Space</code> shortcut alleviates
us from the need to type all those long field and method names that come out of
our imagination. With the <em>Templates</em> feature, it can even write code for us.</p>

<p>Templates are editable in the preferences. To see them, select
<code>Window &gt; Preferences</code> and then in the preferences dialog, <code>Java &gt; Editor &gt; Templates</code>.
The window looks like this:</p>

<p><img src="/images/eclipse_templates.png" width="500"></p>

<p>If you double click on a template you can edit it:</p>

<p><img src="/images/eclipse_template_edit.png" width="500"></p>

<p>The template name is what you type in the Editor window before hitting
<code>CTRL+Space</code> and that will make Eclipse propose you the template. I won't go
into a full explanation of the syntax of the templates, but basically the
template name is replaced by the template pattern and the content between the
<code>${}</code> is replaced either by what you type or by values computed by existing
macros. DZone gives you a good <a href="http://eclipse.dzone.com/news/visual-guide-templates-eclipse">Visual Guide to Template</a>
listing most common macros.</p>

<p>Now we can create our templates for both adding the Log declarations at the
beginning of our class as well as templates for inserting conditionally ran logs.</p>

<p>For the header, we create a template named <code>alh</code> in <code>Java types member</code> context
with the following pattern:</p>

<p>``` java
${:import(android.util.Log)}private static final String LOG_TAG = ${enclosing_type}.class.getSimpleName();
private static final int LOG_LEVEL = Log.${level};
${cursor}</p>

<p><code>``
The different</code>${}` mean:</p>

<ul>
<li><code>${:import(android.util.Log)}</code>: make sure <code>android.util.Log</code> is imported.</li>
<li><code>${enclosing_type}</code>: insert the name of the type (class) we're in.</li>
<li><code>${level}</code>: when inserting, put the cursor here and wait for  the user to
enter the <code>level</code> variable.</li>
<li><code>${cursor}</code>: leave the cursor here when the user hits the <code>ENTER</code> key.</li>
</ul>


<p>With this template, inserting the log headers in a class is achievied with the
following steps:</p>

<ul>
<li>type <code>alh</code> and hit <code>STRL+Space</code>.</li>
<li>select the template (first choice) and hit <code>ENTER</code></li>
<li>enter the desired log level (<code>DEBUG</code> for instance) for the class and hit
<code>ENTER</code>.</li>
<li>continue coding.</li>
</ul>


<p>This is much simpler than copy-pasting the code from another class and replacing
the class name and log level.</p>

<p>The following template, named <code>alv</code> in the <code>Java statement</code> context is for
inserting verbose logs:</p>

<p>``` java
if (LOG_LEVEL &lt;= Log.VERBOSE)</p>

<pre><code>Log.v(LOG_TAG, "${enclosing_method}() ${}");
</code></pre>

<p>${cursor}
<code>``
The nice thing is that it inserts the name of the current method and wait just
after for your debug message. Just typing</code>Enter` will leave a log like:</p>

<p>``` java</p>

<pre><code>    if (LOG_LEVEL &lt;= Log.VERBOSE)
        Log.v(LOG_TAG, "onStart() ");
</code></pre>

<p>```</p>

<p>Wich may be just enough.</p>

<p>On this model, you can create <code>ali</code>, <code>ald</code>, <code>ale</code> templates for the different
debug levels, or if you want to use <code>String.format()</code> templates like :</p>

<p>``` java
if (LOG_LEVEL &lt;= Log.DEBUG)</p>

<pre><code>Log.d(LOG_TAG, String.format("${enclosing_method}() ${}", ${args}));
</code></pre>

<p>${cursor}
```</p>

<p>Just adapt them to your needs.</p>

<p>Once you have finished debugging, if you change the <code>LOG_LEVEL</code> of your class
from let's say <code>VERBOSE</code> to <code>INFO</code>, all the <code>alv</code> templates you've entered
will become <em>dead code</em> as the <code>if</code> surrounding the log lines is always <code>false</code>.
This is because it compares static variables, and this is just what we want.
When we compile for delivery, we want the compiler to optimize out all this code
from the binary.</p>

<p>However, the Java compiler will generate warnings for that. As it is not
possible to surround the log with a <code>@SuppressWarnings()</code> attribute, you may
want to change the error level of dead code from <code>Warning</code> to <code>Ignore</code>. This is
done in <code>Window &gt; Preferences</code>, <code>Java &gt; Compiler &gt; Error/Warnings &gt; Potential
programming problems</code>.</p>

<p>When it's time for delivery, you may want to change the <code>LOG_LEVEL</code> of all
classes to a particular value. To do that, I personally use a slightly modified
version of the <code>alh</code> header template:</p>

<p>``` java
${:import(android.util.Log,com.eurosport.player.constants.DebugConstants)}private static final String LOG_TAG = ${enclosing_type}.class.getSimpleName();
private static final int LOG_LEVEL_LOCAL = Log.${level};
private static final int LOG_LEVEL = DebugConstants.LOG_FORCE_GLOBAL * DebugConstants.LOG_LEVEL + (1 - DebugConstants.LOG_FORCE_GLOBAL) * LOG_LEVEL_LOCAL;
${cursor}</p>

<p>```</p>

<p>That works with the <code>DebugConstants</code> interface :</p>

<p>``` java
public interface DebugConstants {</p>

<pre><code>public static final int LOG_LEVEL = Log.INFO;
public static final int LOG_FORCE_GLOBAL = 0;
</code></pre>

<p>}
```</p>

<p>The way the modified <code>alh</code> template works is the following:</p>

<ul>
<li>if the value of <code>DebugConstants.LOG_FORCE_GLOBAL</code> is 0, the <code>LOG_LEVEL</code> variable
contains the value of the <code>LOG_LEVEL_LOCAL</code> variable.</li>
<li>if the value of <code>DebugConstants.LOG_FORCE_GLOBAL</code> is 1, the <code>LOG_LEVEL</code> variable
contains the value of the <code>DebugConstants.LOG_LEVEL</code> variable.</li>
</ul>


<p>By having inserted this template in my classes, even if at delivery time some
of the <code>LOG_LEVEL_LOCAL</code> values are still set to <code>Log.VERBOSE</code>, by setting
<code>LOG_FORCE_GLOBAL</code> to 1, all log levels will be forced to <code>Log.INFO</code> and all
the log code for deeper debugging levels will be removed by DCE (Dead Code
Elimination).</p>

<p>Now, there's no more excuses to have sloppy logs in your Android code !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the height of the status bar in Android]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/17/get-the-height-of-the-status-bar-in-android/"/>
    <updated>2012-03-17T09:09:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/17/get-the-height-of-the-status-bar-in-android</id>
    <content type="html"><![CDATA[<p>Sometimes in Android, the flexible layout system is not flexible enough and you
need to make some computations inside your code. In these computations, you may
need to subtract the size of the status bar. Stackoverflow gives you
<a href="http://stackoverflow.com/questions/3407256/height-of-status-bar-in-android">some answers</a>,
but they all rely on the fact that te status bar is shown at the time you make
your computation. If you are in full screen mode, by having called for instance:</p>

<p><code>java
getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN)
</code></p>

<p>It doesn't work.</p>

<!-- more -->


<p>The height of the status bar is contained in a dimension resource called
<code>status_bar_height</code>. It's not part of the public resources, so you can't access
it directly from your code with <code>android.R.dimen.status_bar_height</code>. You can
however compute it at runtime with the following code:</p>

<p>``` java</p>

<pre><code>public int getStatusBarHeight() {
    int result = 0;
    int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (resourceId &gt; 0) {
        result = getResources().getDimensionPixelSize(resourceId);
    }
    return result;
}
</code></pre>

<p>```</p>

<p>You need to put this method in a <code>ContextWrapper</code> class.</p>

<p>Hope it helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Google Play signatures with Django]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/12/checking-google-play-signatures-with-django/"/>
    <updated>2012-03-12T07:43:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/12/checking-google-play-signatures-with-django</id>
    <content type="html"><![CDATA[<p>Google play, formerly known as the Android Market, provides in-app billing in several countries.
In the <a href="http://developer.android.com/guide/market/billing/billing_best_practices.html">Security and Design</a> page,
Google states the following:</p>

<blockquote><p>If practical, you should perform signature verification on a remote server and not on a device.
Implementing the verification process on a server makes it difficult for attackers to break the verification process by
reverse engineering your .apk file. If you do offload security processing to a remote server, be sure that the device-server handshake is secure.</p></blockquote>

<p>The signature verification here refers to the signature sent back by the Billing Service to the
<code>GET_PURCHASE_INFORMATION</code>request. The signature is against the JSON payload containing the purchase information. We'llget back later
on the authentication of the dialog with the server.</p>

<!-- more -->


<p>The JSON payload looks like the following (It has been indented for readability):</p>

<p>``` js
{
  "nonce":7822246098812800204,
  "orders":[</p>

<pre><code>{
  "notificationId":"-915368186294557970",
  "orderId":"971056902421676",
  "packageName":"com.xxx.yyy",
  "productId":"com.xxx.yyy.product",
  "purchaseTime":1331562686000,
  "purchaseState":1,
  "developerPayload":"WEHJSU"
}
</code></pre>

<p>  ]
}
```</p>

<p>And we we receive a signature in <code>Base64</code>:</p>

<p>```
rKf9B38gLbJaLiyRbQVJNr0i0IvJxBgi3EmsLoZLkFedZvn642s4+fz3jYCk6IVWWFSqtBH2Z8ChONJkHWrkDUCK79uSBPLN5s4x4AsRHgQ8aw3sRQLAoEDMFA1ym1gkfYfDz+6sxP2Rgg1U/qpHIEHWPDbJAdP7zcM1iz2kEWbYvFwKP3NNWExNB4gWH3IFtPR0l/KLjKBoqpX5zVukmUeaZW0Skx10eFROa4VhqA5JrbZZQwK0jc6FCYi3u6c1ryIw6W5tcdIv1PFOKpE7VMq67yyD+IEXc+nl29FN5ByGhkj/khNY1KLXcszCCa7ygSYw7mQI+omLdyMz6aL3hg==</p>

<p>```</p>

<p>The payload is signed with the Private key associated with you Google Play account. You can grab your public key in
<a href="https://play.google.com/apps/publish/Home#ProfileEditorPlace:">your developer console page</a>.</p>

<p>There are several crypto solutions available in python. In our example, we use <a href="https://www.dlitz.net/software/pycrypto/">pycrypto</a>.
It can easily be installed in your Django virtual environment with:</p>

<p><code>sh
pip install pycrypto
</code></p>

<p>Then, the following method allows checking of the payload singature:</p>

<p>``` python</p>

<p>from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
import base64</p>

<p>PUBLIC_KEY='<Put here your public key>'
VERIFY_KEY= RSA.importKey(base64.decodestring(PUBLIC_KEY))</p>

<p>def verify_signature(message, signature):</p>

<pre><code>'''Verify that signature is the result of signing message''' 
# Get the hash of the message
h = SHA.new(message)
# Create a verifier
verifier = PKCS1_v1_5.new(VERIFY_KEY)
# decode the signature
signature = base64.decodestring(signature)
# verify
return verifier.verify(h, signature)
</code></pre>

<p>```</p>

<p>In a next post, we'll se how to make sure on the Android application side that the responses to our
requests are really coming from our server.</p>
]]></content>
  </entry>
  
</feed>
