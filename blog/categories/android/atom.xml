<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Geek Quickies]]></title>
  <link href="http://mrtn.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://mrtn.me/"/>
  <updated>2012-11-15T15:28:19+01:00</updated>
  <id>http://mrtn.me/</id>
  <author>
    <name><![CDATA[Antoine Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Checking Google Play Signatures on .Net]]></title>
    <link href="http://mrtn.me/blog/2012/11/15/checking-google-play-signatures-on-net/"/>
    <updated>2012-11-15T11:50:00+01:00</updated>
    <id>http://mrtn.me/blog/2012/11/15/checking-google-play-signatures-on-net</id>
    <content type="html"><![CDATA[<p>With <a href="http://developer.android.com/guide/google/play/billing/billing_integrate.html">In-App Billing</a>
on Android, each time a purchase occurs, your application receives a JSON
payload containing information about the purchase, as well as its signature with
your developer certificate.</p>

<p>Google encourages you to verify that the signature is valid to authentify the
purchase. You can do that inside the application, but if the delivery of the
purchase involves a server, it is better to do it on the server to prevent
client code manipulation. The following show how to do it on .Net server
application.</p>

<!-- More -->


<p>The JSON payload looks like the following :</p>

<p>``` js
{ "nonce" : 1836535032137741465,
  "orders" :</p>

<pre><code>[{ "notificationId" : "android.test.purchased",
   "orderId" : "transactionId.android.test.purchased",
   "packageName" : "com.example.dungeons",
   "productId" : "android.test.purchased",
   "developerPayload" : "bGoa+V7g/yqDXvKRqq+JTFn4uQZbPiQJo4pf9RzJ",
   "purchaseTime" : 1290114783411,
   "purchaseState" : 0,
   "purchaseToken" : "rojeslcdyyiapnqcynkjyyjh" }]
</code></pre>

<p>}
```</p>

<p>You receive it with a broadcast <code>com.android.vending.billing.PURCHASE_STATE_CHANGED</code>
in the <code>inapp_signed_data</code> extra intent field. The signature comes as a base 64
encoded string in the <code>inapp_signature</code> intent field and looks like this :</p>

<p><code>
YlNBaqlKSS+zk/fteJuHbvI3/N+hbiLiolYsMl8gCD13+Ii+1m4GSd68rc2TwbSLYsYrHVL/9xg/0CBf
CN6NKLtqjFqRs034ExCW2qaMddwfRiqsGZ3z7ZvWuMyNntE3pTGTxG2X/71/cpGwQoSFQBceVR9t5Sge
Tw5HJimt5xlIhHqgRxS/W/kfrJIyKt03l2hUJDGOX9eig5S4ex6fgyFZxR73/HxOFGJ9ohApwaBNF7rD
LaMZFnYbLsYgBWMOHW1uE+F5b2JZWvyColpe5SKMWaNVWVWZGte1WBOYRFxbriZR1VwClkEg9Y4mVn5k
SZIje5pSueLKwiForU02jA==
</code></p>

<p>It is the signature of the <code>SHA1</code> digest of the JSON payload with the private
key of your developer certificate. Don't look for this private key, it is
detained by Google. Google only provides you the corresponding public key in the
profile page of your developer account :</p>

<p><img src="http://developer.android.com/images/billing_public_key.png"></p>

<p>This public key is the base 64 string of the <a href="http://tools.ietf.org/html/rfc3280#section-4.1.2.7">Subject Public Key Info</a> of
your certificate encoded in the <a href="http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules#DER_encoding">DER format</a>.
It corresponds to the following part of your certificate:</p>

<pre>
Certificate:
...
       Subject Public Key Info:
           Public Key Algorithm: rsaEncryption
           RSA Public Key: (1024 bit)
               Modulus (1024 bit):
                   00:b4:31:98:0a:c4:bc:62:c1:88:aa:dc:b0:c8:bb:
                   33:35:19:d5:0c:64:b9:3d:41:b2:96:fc:f3:31:e1:
                   66:36:d0:8e:56:12:44:ba:75:eb:e8:1c:9c:5b:66:
                   70:33:52:14:c9:ec:4f:91:51:70:39:de:53:85:17:
                   16:94:6e:ee:f4:d5:6f:d5:ca:b3:47:5e:1b:0c:7b:
                   c5:cc:2b:6b:c1:90:c3:16:31:0d:bf:7a:c7:47:77:
                   8f:a0:21:c7:4c:d0:16:65:00:c1:0f:d7:b8:80:e3:
                   d2:75:6b:c1:ea:9e:5c:5c:ea:7d:c1:a1:10:bc:b8:
                   e8:35:1c:9e:27:52:7e:41:8f
               Exponent: 65537 (0x10001)
...
</pre>


<p>The public key in this format cannot be read directly by the
<code>RSACryptoServiceProvider</code> class of the .Net <code>System.Security.Cryptography</code>
module. The preferred import format for this class is XML. The
<a href="http://www.bouncycastle.org/">Bouncy Castle Library</a> allows reading this kind
of encoding, but you don't really need to add a new dependency to your project.
Instead, what you need is simply to convert your public key in XML. Once this is
done, you can use the following simple .Net code to check the signature:</p>

<p>``` csharp</p>

<pre><code>    public static bool verify(String message, String base64Signature, String publicKey)
    {
        // By default the result is false
        bool result = false;
        try
        {
            // Create the provider and load the KEY
            RSACryptoServiceProvider provider = new RSACryptoServiceProvider();
            provider.FromXmlString(publicKey);

            // The signature is supposed to be encoded in base64 and the SHA1 checksum
            // Of the message is computed against the UTF-8 representation of the 
            // message
            byte[] signature = Convert.FromBase64String(base64Signature);
            SHA1Managed sha = new SHA1Managed();
            byte[] data = Encoding.UTF8.GetBytes(message);

            result = provider.VerifyData(data, sha, signature);
        }
        catch (Exception /* e */) { /* TODO: add some kind of logging here */}
        return result;
    }
</code></pre>

<p>```</p>

<p>For converting your key, you can download the <a href="/downloads/code/PEMKeyLoader.cs">PEMKeyLoader class</a>
and use it in a Console Project to convert your key to XML with the follwing code :</p>

<p>``` csharp
...</p>

<p>RSACryptoServiceProvider provider = PEMKeyLoader.CryptoServiceProviderFromPublicKeyInfo(MY_BASE64_PUBLIC_KEY);
Console.WriteLine(provider.ToXmlString(false));
...</p>

<p>```</p>

<p>You will obtain your XML formatted key :</p>

<p><code>
&lt;RSAKeyValue&gt;&lt;Modulus&gt;u5xfVod+5uEP7Zu/xN3v4yhAO3tSsezDJUBajr92u+wUXZNH2IKt/9/V/HjMyzW5AC0PZpi6ROTWvQoO5Xa2L8+lKLiVtVcaI60O+M6B1Rn1zCYD//TgYwfqofKPvbv/Vshl+LwdkqBcp1as4t6+2f0sGHwH/hT1D+E94m0zf4qOR5O5o3ILXaC1z8pAoV4cM6YttFRDh9lxPj/9hkQR4l809bbxOdJPo41F69rqdyU4xFjncxCOHcFdnkT7LQUVv1v2GYae3Rl4iZVncbEygg4K/+uG21QyC0xRda9L2KmQyV7Mtcb5YTJzyfaI/Z/EEZ0A2pkX+4Ki1MKCaUAPLw==&lt;/Modulus&gt;&lt;Exponent&gt;AQAC&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;
</code></p>

<p>That you can use then in your project as a string constant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid Thread Issues while Testing an Android Service]]></title>
    <link href="http://mrtn.me/blog/2012/11/08/avoid-thread-issues-while-testing-an-android-service/"/>
    <updated>2012-11-08T12:12:00+01:00</updated>
    <id>http://mrtn.me/blog/2012/11/08/avoid-thread-issues-while-testing-an-android-service</id>
    <content type="html"><![CDATA[<p>The <a href="http://developer.android.com/tools/testing/testing_android.html">Android Test Framework</a>
provides many tools to test parts of an Android application, and the
<a href="http://developer.android.com/reference/android/test/ServiceTestCase.html">ServiceTestCase</a>
in particular to test your <a href="http://developer.android.com/reference/android/app/Service.html">Service</a>
classes.</p>

<p>This class is quite useful but you may find yourself scratching your head
because your test does not work like it should. This happens in particular if
you're doing some background work in your service, relying for example on
<a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a>
for it.</p>

<p>Read on if you want to understand why it doesn't work and find a solution for it.</p>

<!-- More -->


<p>In an Android application, any service is instantiated and operates on the main
thread. But this is not the case in the test framework provided by the
<code>ServiceTestCase</code> class. Your Service is instantiated in the same thread the
test runs.</p>

<p>While your tests are running, there is no <a href="http://developer.android.com/reference/android/os/Looper.html">Looper</a>
waiting for messages on the service thread. In consequence, anything that relies
on it and on the <a href="http://developer.android.com/reference/android/os/Handler.html">Handler</a>
class to communicate back to the main thread will not work.</p>

<p>For instance, <code>AsyncTask</code> uses a handler to ensure that the <code>onPostExecute</code>
method is called on the main thread. After <code>doInBackground</code> has been called,
it posts a message on this handler, but as the <code>Looper</code> on the service is not
running to handle the message, the <code>onPostExecute</code> method will never be
called.</p>

<p>To circumvent this behaviour, the service must be run on a separate thread with
a <code>Looper</code> running.</p>

<h2>Simulating <em>main thread</em> behaviour</h2>

<p>The <code>ThreadServiceTestCase&lt;T extends Service&gt;</code> (<a href="/downloads/code/ThreadServiceTestCase.java">source here</a>)
class that we describe here provides such features. It declares a <code>Looper</code> and a
<code>Hanlder</code> to be able to run code on it:</p>

<p><code>java
  protected Handler serviceHandler;
  protected Looper serviceLooper;
</code></p>

<p>In the setup of the test, we instantiate the service thread, start it, and link
our handler with its looper:</p>

<p>``` java</p>

<pre><code>@Override
protected void setUp() throws Exception {
    super.setUp();
    // Setup service thread
    HandlerThread serviceThread = new HandlerThread("[" + serviceClass.getSimpleName() + "Thread]");
    serviceThread.start();
    serviceLooper = serviceThread.getLooper();
    serviceHandler = new Handler(serviceLooper);
}
</code></pre>

<p><code>``
The corresponding</code>tearDown` method shuts down the tread.</p>

<p>We provide a <code>runOnServiceThread</code> method to be able to run code on the service
thread:</p>

<p>``` java</p>

<pre><code>protected void runOnServiceThread(final Runnable r) {
    final CountDownLatch serviceSignal = new CountDownLatch(1);
    serviceHandler.post(new Runnable() {

        @Override
        public void run() {
            r.run();
            serviceSignal.countDown();
        }
    });

    try {
        serviceSignal.await();
    } catch (InterruptedException ie) {
        fail("The Service thread has been interrupted");
    }
}
</code></pre>

<p>```</p>

<p>Then, the <code>startService</code> methods starts the service in its own thread:</p>

<p>``` java</p>

<pre><code>static class Holder&lt;H&gt; {
    H value;
}

protected T startService(final boolean bound, final ServiceRunnable r) {
    final Holder&lt;T&gt; serviceHolder = new Holder&lt;T&gt;();

    // I want to create my service in its own 'Main thread'
    // So it can use its handler
    runOnServiceThread(new Runnable() {

        @Override
        public void run() {
            T service = null;
            if (bound) {
                /* IBinder binder = */bindService(new Intent(getContext(), serviceClass));
            } else {
                startService(new Intent(getContext(), serviceClass));
            }
            service = getService();
            if (r != null)
                r.run(service);
            serviceHolder.value = service;
        }
    });

    return serviceHolder.value;
}
</code></pre>

<p>```</p>

<p>The <code>bound</code> parameters tells wether to start the service with a binding or with
an <code>Intent</code>.. The optional <code>ServiceRunnable</code> parameter can be provided to add
some initialization code.</p>

<p>A test class using this code looks like the following:</p>

<p>```java
public class MyServiceTest extends ThreadServiceTestCase<MyService> {</p>

<pre><code>public MyServiceTest() {
    super(MyService.class);
}


public void testSomething() {

    // starts the service
    MyService service = startService(true, null);
    ...
    // Do something on the service
    runOnServiceThread( new ServiceRunnable() {
        public void run(Service service) {
            // do something
        }
    });

}
</code></pre>

<p>```</p>

<p>With it, the service is started in its own thread and the <code>Looper</code> and <code>Handler</code>
mechanism will work.</p>

<h2>Waiting for listeners to be notified</h2>

<p>A service that performs tasks asynchronously also notifies the outcome of the
background tasks asynchronously. There are several techniques for doing that,
but the most common are :</p>

<ul>
<li>Broadcast an intent, or</li>
<li>Call a callback method on listeners.</li>
</ul>


<p>This usually happens in the main thread. In our case, it would happen in the
service thread. As the test is executing itself in its own thread, some
synchronization mechanism is needed between the service thread and the test
thread to be able to handle the outcome of the background task in the test.</p>

<p>The <code>ThreadServiceTestCase</code> class provides an helper class for that:</p>

<p>```java</p>

<pre><code>public static class ServiceSyncHelper {
    // The semaphore will wakeup clients
    protected final Semaphore semaphore = new Semaphore(0);

    /**
     * Waits for some response coming from the service.
     * 
     * @param timeout
     *            The maximum time to wait.
     * @throws InterruptedException
     *             if the Thread is interrupted or reaches the timeout.
     */
    public synchronized void waitListener(long timeout) throws InterruptedException {
        if (!semaphore.tryAcquire(timeout, TimeUnit.MILLISECONDS))
            throw new InterruptedException();
    }

}
</code></pre>

<p>```</p>

<p>It contains a semaphore that can be used to synchronize the service thread with
the test thread.</p>

<p>In the case of the callback listener, we can then define an utility class like
the following:</p>

<p>```java</p>

<pre><code>static class SynchronizedListener extends ServiceSyncHelper {
    Object result;

    /**
     * Service listener that registers the value returned by the service in
     * the holder and release the semaphore.
     */
    final MyService.Listener listener = new MyService.Listener() {
        public void onTaskPerformed(MyService service, Object returnValue) {
            result = returnValue;
            semaphore.release();
        }
    };

}
</code></pre>

<p>```</p>

<p>When notified by the service in the service thread, the contained listener
releases the semaphore and awakes the test that is waiting on the semaphore.</p>

<p>The listener contained in the helper class also needs to be added to the service
being tested at service initialization. A test using this feature then becomes :</p>

<p>```java
public void testSomething() {</p>

<pre><code>// Catch listener callback in the test
final SynchronizedListener listener = new SynchronizedListener();

// starts the service
/* MyService service = */ startService(true, new ServiceRunnable() {
    @Override
    public void run(Service service) {
    // add our listener to the service
        service.addListener(listener);
    }
});

// wait for the service to notify us
try {
    // Wait for the service to perform its background task
    listener.waitListener(WAIT_TIME);
} catch (InterruptedException ie) {
    fail("The listener never got signaled");
}  

assertEquals(expected_value, listener.result );
...
</code></pre>

<p>}
```</p>

<p>You can grab The <code>ThreadServiceTestCase&lt;T extends Service&gt;</code> source code <a href="/downloads/code/ThreadServiceTestCase.java">here</a>.
Hope it will help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlock and root a Nexus device]]></title>
    <link href="http://mrtn.me/blog/2012/10/25/unlock-and-root-a-nexus-device/"/>
    <updated>2012-10-25T07:51:00+02:00</updated>
    <id>http://mrtn.me/blog/2012/10/25/unlock-and-root-a-nexus-device</id>
    <content type="html"><![CDATA[<p>Having an unlocked and rooted device provides several advantages :</p>

<ul>
<li>Easy backup and restore with Nandroid backup,</li>
<li>Easy firmware replacement and updates installation,</li>
<li>Advanced debugging capabilities.</li>
</ul>


<p>The following instructions allow unlocking and rooting a Nexus device (Galaxy
Nexus, Nexus 7) from the command line on a Linux machine. It involves:</p>

<ul>
<li>Backuping your device,</li>
<li>Unlocking the bootloader,</li>
<li>Restoring the backup,</li>
<li>Rooting the device.</li>
</ul>


<!-- More -->


<h3>Prerequisites</h3>

<p>Here is the list of prerequisites :</p>

<ul>
<li><a href="http://developer.android.com/sdk/index.html">Android SDK</a>, to have access to <code>adb</code> and <code>fastboot</code>.</li>
<li><a href="http://download2.clockworkmod.com/recoveries/recovery-clockwork-6.0.1.0-grouper.img">Clockwork Mode (CWM) </a> recovery image.</li>
<li><a href="http://download.chainfire.eu/212/SuperSU/CWM-SuperSU-v0.96.zip">SuperSU</a> installable zip.</li>
</ul>


<p>The <code>platform-tools</code> directory of the Android SDK must be on your <code>PATH</code>, and
the device must have USB debugging enabled.</p>

<h3>Udev rules</h3>

<p>On Linux, you don't have to install any driver. You need however to enable
access for your users. Depending on your distribution, you may have a package
handling that, but if not, here is a quick way to give access to your user to
the device (here <code>antoine</code>). Type as <code>root</code>:</p>

<p><code>sh
[root@dev ~] $ cd /etc/udev/rules.d
[root@dev rules.d] $ wget https://raw.github.com/M0Rf30/android-udev-rules/master/51-android.rules
[root@dev rules.d] $ groupadd adbusers
[root@dev rules.d] $ udevadm control --reload-rules
[root@dev rules.d] $ gpasswd -a antoine adbusers
</code></p>

<p>Plug your device on the USB cable, and you should be able to see it with <code>adb</code>:</p>

<p><code>sh
[antoine@dev nexus] $ adb devices                                                                                                                                                                                                                                                    
List of devices attached                                                                                                                                                                                                                                                        
015d2ebecd341e06        device                                                                                                                                                                                                                                                  
</code></p>

<h3>Backup</h3>

<p>Unlocking the bootloader wipes all the data on the device. If you're not doing
this on a new device, you may want to backup and restore your data and
applications. With the device connected in USB debug mode, type :</p>

<p><code>sh
[antoine@dev nexus] $ adb backup -apk -shared -all -f backup.ab
</code></p>

<p>Depending on the amount of data you have on your device, this process can be
quite long.</p>

<h3>OEM unlock</h3>

<p>Unlocking the device is easy. With the device connected in USB debug mode, type:</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
</code></p>

<p>The device will reboot in <em>fastboot</em> mode. To check this, type:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot devices
015d2ebecd341e06        fastboot
</code>
You will see your device in the list. Then you can unlock it by typing:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot oem unlock
...
(bootloader) erasing userdata...
(bootloader) erasing userdata done
(bootloader) erasing cache...
(bootloader) erasing cache done
(bootloader) unlocking...
(bootloader) Bootloader is unlocked now.
OKAY [ 54.821s]
finished. total time: 54.821s
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>At the end of the process, reboot your device:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>You will go through the initialization process in the device.</p>

<h3>Restore</h3>

<p>Once the device is up and running, you can restore your data with:</p>

<p><code>sh
[antoine@dev nexus] $ adb restore backup.ab
</code></p>

<h3>Root</h3>

<p>To root the device, we will apply the SuperSU installable zip as an update in
CWM.</p>

<p>First we push the SuperSU installable zip in the device filesystem:</p>

<p><code>sh
[antoine@dev nexus] $ adb push CWM-SuperSU-v0.96.zip /sdcard/update.zip
752 KB/s (674673 bytes in 0.875s)
</code></p>

<p>Now that the device is unlocked, we can boot it into CWM. We first reboot it in
fastboot mode:</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
</code></p>

<p>And then boot it with CWM:</p>

<p><code>sh
[antoine@dev nexus] $ fastboot boot recovery-clockwork-6.0.1.0-grouper.img
downloading 'boot.img'...
OKAY [  0.800s]
booting...
OKAY [  0.020s]
finished. total time: 0.820s
</code></p>

<p>After a few seconds, the device will show the CWM interface. With the volume
buttons, move to the <code>install zip from sdcard</code> option and select it by pushing
the power button.</p>

<p>On the new menu that appears, choose the <code>apply /sdcard/update.zip</code> option and
scroll down to the <code>Yes</code> option. click on the power button and SuperSU will
be installed.</p>

<p>Once done, you can go back to the main CWM menu and reboot the device.</p>

<h3>Permanently install CWM</h3>

<p>You can permanetly install CWM on the device recovery partition so that
you can start your device in CWM without being connected via USB.</p>

<p>Your device automatically restores the recovery partition at each boot. To avoid
that, you need to delete the <code>/system/recovery-from-boot.p</code> file on the
device :</p>

<p><code>sh
[antoine@dev nexus] $ adb shell
shell@android:/ $ su
shell@android:/ # rm /system/recovery-from-boot.p
shell@android:/ # exit
shell@android:/ $ exit
</code></p>

<p>You can then reboot in fastboot mode and install CWM permanetly :</p>

<p><code>sh
[antoine@dev nexus] $ adb reboot bootloader
[antoine@dev nexus] $ fastboot flash recovery recovery-clockwork-touch-6.0.0.6-grouper.img
[antoine@dev nexus] $ fastboot reboot
</code></p>

<p>I personally don't recommend to install CWM permanetly as it will prevent you
from installing the OTA updates that are pushed to your device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Eclipse templates to ease Android logging]]></title>
    <link href="http://mrtn.me/blog/2012/03/24/using-eclipse-templates-to-ease-android-logging/"/>
    <updated>2012-03-24T07:26:00+01:00</updated>
    <id>http://mrtn.me/blog/2012/03/24/using-eclipse-templates-to-ease-android-logging</id>
    <content type="html"><![CDATA[<p>Adding logs to your Android source code is sometimes the only way to really
understand what happens , especially in asynchronous situations.</p>

<p>If you are lazy like me, you may insert <em>lazy logs</em> like this one:</p>

<p><code>java
  Log.v("#LOOK#", "onStart()");
</code></p>

<p>Instead of having less lazy code like:</p>

<p>``` java
public class SomeActivity extends Activity {</p>

<pre><code>private static final String LOG_TAG = SomeActivity.class
        .getSimpleName();
private static final int LOG_LEVEL = Log.VERBOSE;
</code></pre>

<p>...</p>

<pre><code>@Override
public void onStart() {
    if (LOG_LEVEL &lt;= Log.VERBOSE)
        Log.v(LOG_TAG, "onStart()");
</code></pre>

<p>```</p>

<p>But Eclipse can easily help you to avoid this and then the need to clean up your
code after debbuging.</p>

<!-- more -->


<p>Everybody uses content assist in Eclipse. The <code>CTRL+Space</code> shortcut alleviates
us from the need to type all those long field and method names that come out of
our imagination. With the <em>Templates</em> feature, it can even write code for us.</p>

<p>Templates are editable in the preferences. To see them, select
<code>Window &gt; Preferences</code> and then in the preferences dialog, <code>Java &gt; Editor &gt; Templates</code>.
The window looks like this:</p>

<p><img src="/images/eclipse_templates.png" width="500"></p>

<p>If you double click on a template you can edit it:</p>

<p><img src="/images/eclipse_template_edit.png" width="500"></p>

<p>The template name is what you type in the Editor window before hitting
<code>CTRL+Space</code> and that will make Eclipse propose you the template. I won't go
into a full explanation of the syntax of the templates, but basically the
template name is replaced by the template pattern and the content between the
<code>${}</code> is replaced either by what you type or by values computed by existing
macros. DZone gives you a good <a href="http://eclipse.dzone.com/news/visual-guide-templates-eclipse">Visual Guide to Template</a>
listing most common macros.</p>

<p>Now we can create our templates for both adding the Log declarations at the
beginning of our class as well as templates for inserting conditionally ran logs.</p>

<p>For the header, we create a template named <code>alh</code> in <code>Java types member</code> context
with the following pattern:</p>

<p>``` java
${:import(android.util.Log)}private static final String LOG_TAG = ${enclosing_type}.class.getSimpleName();
private static final int LOG_LEVEL = Log.${level};
${cursor}</p>

<p><code>``
The different</code>${}` mean:</p>

<ul>
<li><code>${:import(android.util.Log)}</code>: make sure <code>android.util.Log</code> is imported.</li>
<li><code>${enclosing_type}</code>: insert the name of the type (class) we're in.</li>
<li><code>${level}</code>: when inserting, put the cursor here and wait for  the user to
enter the <code>level</code> variable.</li>
<li><code>${cursor}</code>: leave the cursor here when the user hits the <code>ENTER</code> key.</li>
</ul>


<p>With this template, inserting the log headers in a class is achievied with the
following steps:</p>

<ul>
<li>type <code>alh</code> and hit <code>STRL+Space</code>.</li>
<li>select the template (first choice) and hit <code>ENTER</code></li>
<li>enter the desired log level (<code>DEBUG</code> for instance) for the class and hit
<code>ENTER</code>.</li>
<li>continue coding.</li>
</ul>


<p>This is much simpler than copy-pasting the code from another class and replacing
the class name and log level.</p>

<p>The following template, named <code>alv</code> in the <code>Java statement</code> context is for
inserting verbose logs:</p>

<p>``` java
if (LOG_LEVEL &lt;= Log.VERBOSE)</p>

<pre><code>Log.v(LOG_TAG, "${enclosing_method}() ${}");
</code></pre>

<p>${cursor}
<code>``
The nice thing is that it inserts the name of the current method and wait just
after for your debug message. Just typing</code>Enter` will leave a log like:</p>

<p>``` java</p>

<pre><code>    if (LOG_LEVEL &lt;= Log.VERBOSE)
        Log.v(LOG_TAG, "onStart() ");
</code></pre>

<p>```</p>

<p>Wich may be just enough.</p>

<p>On this model, you can create <code>ali</code>, <code>ald</code>, <code>ale</code> templates for the different
debug levels, or if you want to use <code>String.format()</code> templates like :</p>

<p>``` java
if (LOG_LEVEL &lt;= Log.DEBUG)</p>

<pre><code>Log.d(LOG_TAG, String.format("${enclosing_method}() ${}", ${args}));
</code></pre>

<p>${cursor}
```</p>

<p>Just adapt them to your needs.</p>

<p>Once you have finished debugging, if you change the <code>LOG_LEVEL</code> of your class
from let's say <code>VERBOSE</code> to <code>INFO</code>, all the <code>alv</code> templates you've entered
will become <em>dead code</em> as the <code>if</code> surrounding the log lines is always <code>false</code>.
This is because it compares static variables, and this is just what we want.
When we compile for delivery, we want the compiler to optimize out all this code
from the binary.</p>

<p>However, the Java compiler will generate warnings for that. As it is not
possible to surround the log with a <code>@SuppressWarnings()</code> attribute, you may
want to change the error level of dead code from <code>Warning</code> to <code>Ignore</code>. This is
done in <code>Window &gt; Preferences</code>, <code>Java &gt; Compiler &gt; Error/Warnings &gt; Potential
programming problems</code>.</p>

<p>When it's time for delivery, you may want to change the <code>LOG_LEVEL</code> of all
classes to a particular value. To do that, I personally use a slightly modified
version of the <code>alh</code> header template:</p>

<p>``` java
${:import(android.util.Log,com.eurosport.player.constants.DebugConstants)}private static final String LOG_TAG = ${enclosing_type}.class.getSimpleName();
private static final int LOG_LEVEL_LOCAL = Log.${level};
private static final int LOG_LEVEL = DebugConstants.LOG_FORCE_GLOBAL * DebugConstants.LOG_LEVEL + (1 - DebugConstants.LOG_FORCE_GLOBAL) * LOG_LEVEL_LOCAL;
${cursor}</p>

<p>```</p>

<p>That works with the <code>DebugConstants</code> interface :</p>

<p>``` java
public interface DebugConstants {</p>

<pre><code>public static final int LOG_LEVEL = Log.INFO;
public static final int LOG_FORCE_GLOBAL = 0;
</code></pre>

<p>}
```</p>

<p>The way the modified <code>alh</code> template works is the following:</p>

<ul>
<li>if the value of <code>DebugConstants.LOG_FORCE_GLOBAL</code> is 0, the <code>LOG_LEVEL</code> variable
contains the value of the <code>LOG_LEVEL_LOCAL</code> variable.</li>
<li>if the value of <code>DebugConstants.LOG_FORCE_GLOBAL</code> is 1, the <code>LOG_LEVEL</code> variable
contains the value of the <code>DebugConstants.LOG_LEVEL</code> variable.</li>
</ul>


<p>By having inserted this template in my classes, even if at delivery time some
of the <code>LOG_LEVEL_LOCAL</code> values are still set to <code>Log.VERBOSE</code>, by setting
<code>LOG_FORCE_GLOBAL</code> to 1, all log levels will be forced to <code>Log.INFO</code> and all
the log code for deeper debugging levels will be removed by DCE (Dead Code
Elimination).</p>

<p>Now, there's no more excuses to have sloppy logs in your Android code !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the height of the status bar in Android]]></title>
    <link href="http://mrtn.me/blog/2012/03/17/get-the-height-of-the-status-bar-in-android/"/>
    <updated>2012-03-17T09:09:00+01:00</updated>
    <id>http://mrtn.me/blog/2012/03/17/get-the-height-of-the-status-bar-in-android</id>
    <content type="html"><![CDATA[<p>Sometimes in Android, the flexible layout system is not flexible enough and you
need to make some computations inside your code. In these computations, you may
need to subtract the size of the status bar. Stackoverflow gives you
<a href="http://stackoverflow.com/questions/3407256/height-of-status-bar-in-android">some answers</a>,
but they all rely on the fact that te status bar is shown at the time you make
your computation. If you are in full screen mode, by having called for instance:</p>

<p><code>java
getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN)
</code></p>

<p>It doesn't work.</p>

<!-- more -->


<p>The height of the status bar is contained in a dimension resource called
<code>status_bar_height</code>. It's not part of the public resources, so you can't access
it directly from your code with <code>android.R.dimen.status_bar_height</code>. You can
however compute it at runtime with the following code:</p>

<p>``` java</p>

<pre><code>public int getStatusBarHeight() {
    int result = 0;
    int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (resourceId &gt; 0) {
        result = getResources().getDimensionPixelSize(resourceId);
    }
    return result;
}
</code></pre>

<p>```</p>

<p>You need to put this method in a <code>ContextWrapper</code> class.</p>

<p>Hope it helps.</p>
]]></content>
  </entry>
  
</feed>
