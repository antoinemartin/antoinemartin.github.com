<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Geek Quickies]]></title>
  <link href="http://antoinemartin.github.com/atom.xml" rel="self"/>
  <link href="http://antoinemartin.github.com/"/>
  <updated>2012-03-18T11:24:13+01:00</updated>
  <id>http://antoinemartin.github.com/</id>
  <author>
    <name><![CDATA[Antoine Martin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get the height of the status bar in Android]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/17/get-the-height-of-the-status-bar-in-android/"/>
    <updated>2012-03-17T09:09:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/17/get-the-height-of-the-status-bar-in-android</id>
    <content type="html"><![CDATA[<p>Sometimes in Android, the flexible layout system is not flexible enough and you
need to make some computations inside your code. In these computations, you may
need to subtract the size of the status bar. Stackoverflow gives you
<a href="http://stackoverflow.com/questions/3407256/height-of-status-bar-in-android">some answers</a>,
but they all rely on the fact that te status bar is shown at the time you make
your computation. If you are in full screen mode, by having called for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">getWindow</span><span class="o">().</span><span class="na">setFlags</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_FULLSCREEN</span><span class="o">,</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_FULLSCREEN</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&#8217;t work.</p>

<!-- more -->


<p>The height of the status bar is contained in a dimension resource called
<code>status_bar_height</code>. It&#8217;s not part of the public resources, so you can&#8217;t access
it directly from your code with <code>android.R.dimen.status_bar_height</code>. You can
however compute it at runtime with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getStatusBarHeight</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">resourceId</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getIdentifier</span><span class="o">(</span><span class="s">&quot;status_bar_height&quot;</span><span class="o">,</span> <span class="s">&quot;dimen&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">resourceId</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDimensionPixelSize</span><span class="o">(</span><span class="n">resourceId</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to put this method in a <code>ContextWrapper</code> class.</p>

<p>Hope it helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a virtualenv Django shell from the Linux Desktop]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop/"/>
    <updated>2012-03-13T07:58:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/13/start-a-virtualenv-django-shell-from-the-linux-desktop</id>
    <content type="html"><![CDATA[<p>If you are tired to fire a terminal window, <code>cd</code> to your project directory and activate your python <code>virtualenv</code>
to get to your Django project, you will find here some tips to improve things a little bit.</p>

<!-- more -->


<p>This tip is divided in two parts :</p>

<ol>
<li>First we create a shell startup script that <em>activates</em> the <code>virtualenv</code>, bash completion and <code>cd</code> in the project directory.</li>
<li>Then we create a <a href="http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html">Linux Desktop Entry</a> file
That spawns a console in our environment.</li>
</ol>


<p>Here you have the startup script:</p>

<figure class='code'><figcaption><span>Django startup script (.consolerc)</span> <a href='http://antoinemartin.github.com/downloads/code/.consolerc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The layout of the development environment is assumed to be:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &lt;pyton virtual env&gt;/</span>
</span><span class='line'><span class="c">#   src/</span>
</span><span class='line'><span class="c">#     &lt;project name&gt;/</span>
</span><span class='line'><span class="c">#       .consolerc (this file)</span>
</span><span class='line'><span class="c">#       setup.py</span>
</span><span class='line'><span class="c">#       ...</span>
</span><span class='line'><span class="c">#       &lt;project name&gt;/</span>
</span><span class='line'><span class="c">#         manage.py</span>
</span><span class='line'><span class="c">#         settings.py</span>
</span><span class='line'><span class="c">#         ...</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Run the standard bash rc file</span>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="c"># Get the current source file name</span>
</span><span class='line'><span class="nv">current</span><span class="o">=</span><span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Retrieve the source directory</span>
</span><span class='line'><span class="nv">DJANGO_SOURCE_DIR</span><span class="o">=</span><span class="s2">&quot;$(dirname &quot;</span><span class="k">$(</span>readlink -f <span class="s2">&quot;$current&quot;</span><span class="k">)</span><span class="s2">&quot;)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the Django related directories</span>
</span><span class='line'><span class="nv">DJANGO_PROJECT_NAME</span><span class="o">=</span><span class="s2">&quot;$(basename &quot;</span><span class="nv">$DJANGO_SOURCE_DIR</span><span class="s2">&quot;)&quot;</span>
</span><span class='line'><span class="nv">DJANGO_ENV_DIR</span><span class="o">=</span><span class="k">$(</span>readlink -f <span class="s2">&quot;${DJANGO_SOURCE_DIR}/../../&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">DJANGO_PROJECT_DIR</span><span class="o">=</span><span class="s2">&quot;${DJANGO_SOURCE_DIR}/${DJANGO_PROJECT_NAME}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Activate the environment</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;${DJANGO_ENV_DIR}/bin/activate&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$DJANGO_PROJECT_DIR&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:$(pwd)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Retrieve the Django bash completion file (only once) and execute it. </span>
</span><span class='line'><span class="c"># This is potentially insecure.</span>
</span><span class='line'><span class="nv">DJANGO_BASH_COMPLETION</span><span class="o">=</span><span class="s2">&quot;${DJANGO_SOURCE_DIR}/.django_bash_completion&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>curl http://code.djangoproject.com/svn/django/trunk/extras/django_bash_completion -o <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span> 2&gt;/dev/null
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$DJANGO_BASH_COMPLETION&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Miscellaneous</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">runserver</span><span class="o">=</span><span class="s1">&#39;cd $DJANGO_PROJECT_DIR;manage.py runserver 0.0.0.0:8000&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The comment at the beginning explains how the project directory layout is assumed to be. That is the only assumption that makes the
script. In consequence, it is reusable <em>as is</em> in any other project.</p>

<p>Here is the <code>.desktop</code> file that runs a terminal console with our script:</p>

<figure class='code'><figcaption><span>Django desktop file (Django.desktop)</span> <a href='http://antoinemartin.github.com/downloads/code/Django.desktop'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>Desktop Entry<span class="o">]</span>
</span><span class='line'><span class="nv">Exec</span><span class="o">=</span>/bin/bash --rcfile .consolerc
</span><span class='line'>GenericName<span class="o">[</span>fr<span class="o">]=</span>MyProject Django
</span><span class='line'><span class="nv">GenericName</span><span class="o">=</span>MyProject Django
</span><span class='line'><span class="nv">Icon</span><span class="o">=</span>/home/antoine/images/django-icon_0.png
</span><span class='line'><span class="nv">MimeType</span><span class="o">=</span>
</span><span class='line'>Name<span class="o">[</span>fr<span class="o">]=</span>MyProject Django
</span><span class='line'><span class="nv">Name</span><span class="o">=</span>MyProject Django
</span><span class='line'><span class="nv">Path</span><span class="o">=</span>/home/antoine/src/django/my_project/src/my_project/
</span><span class='line'><span class="nv">StartupNotify</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">Terminal</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">TerminalOptions</span><span class="o">=</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>Application
</span><span class='line'><span class="nv">Categories</span><span class="o">=</span>Development
</span></code></pre></td></tr></table></div></figure>


<p>The command runs in a terminal because of <code>Terminal=true</code>. You can see that apart from <code>Name</code> and <code>GenericName</code>, the only
line specific to the project is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Path=/home/antoine/src/django/my_project/src/my_project/</span></code></pre></td></tr></table></div></figure>


<p>It defines the project path, making it easy to reuse. The execution of our init script is done through:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Exec=/bin/bash --rcfile .consolerc</span></code></pre></td></tr></table></div></figure>


<p>The <code>Icon</code> is the familiar Django icon :</p>

<p><img src="http://antoinemartin.github.com/images/django-icon_0.png"></p>

<p>I personally put the <code>.desktop</code> file in <code>$HOME/Desktop</code>, but it also can reside in <code>$HOME/.local/share/applications</code>. In that
case, the entry will be available in the menu. I&#8217;ve tested this under KDE, but it should work also with Gnome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Google Play signatures with Django]]></title>
    <link href="http://antoinemartin.github.com/blog/2012/03/12/checking-google-play-signatures-with-django/"/>
    <updated>2012-03-12T07:43:00+01:00</updated>
    <id>http://antoinemartin.github.com/blog/2012/03/12/checking-google-play-signatures-with-django</id>
    <content type="html"><![CDATA[<p>Google play, formerly known as the Android Market, provides in-app billing in several countries.
In the <a href="http://developer.android.com/guide/market/billing/billing_best_practices.html">Security and Design</a> page,
Google states the following:</p>

<blockquote><p>If practical, you should perform signature verification on a remote server and not on a device.
Implementing the verification process on a server makes it difficult for attackers to break the verification process by
reverse engineering your .apk file. If you do offload security processing to a remote server, be sure that the device-server handshake is secure.</p></blockquote>

<p>The signature verification here refers to the signature sent back by the Billing Service to the
<code>GET_PURCHASE_INFORMATION</code>request. The signature is against the JSON payload containing the purchase information. We&#8217;llget back later
on the authentication of the dialog with the server.</p>

<!-- more -->


<p>The JSON payload looks like the following (It has been indented for readability):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;nonce&quot;</span><span class="o">:</span><span class="mi">7822246098812800204</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;orders&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;notificationId&quot;</span><span class="o">:</span><span class="s2">&quot;-915368186294557970&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;orderId&quot;</span><span class="o">:</span><span class="s2">&quot;971056902421676&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;packageName&quot;</span><span class="o">:</span><span class="s2">&quot;com.xxx.yyy&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;productId&quot;</span><span class="o">:</span><span class="s2">&quot;com.xxx.yyy.product&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;purchaseTime&quot;</span><span class="o">:</span><span class="mi">1331562686000</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;purchaseState&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;developerPayload&quot;</span><span class="o">:</span><span class="s2">&quot;WEHJSU&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we we receive a signature in <code>Base64</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">rKf9B38gLbJaLiyRbQVJNr0i0IvJxBgi3EmsLoZLkFedZvn642s4</span><span class="o">+</span><span class="nx">fz3jYCk6IVWWFSqtBH2Z8ChONJkHWrkDUCK79uSBPLN5s4x4AsRHgQ8aw3sRQLAoEDMFA1ym1gkfYfDz</span><span class="o">+</span><span class="mi">6</span><span class="nx">sxP2Rgg1U</span><span class="o">/</span><span class="nx">qpHIEHWPDbJAdP7zcM1iz2kEWbYvFwKP3NNWExNB4gWH3IFtPR0l</span><span class="o">/</span><span class="nx">KLjKBoqpX5zVukmUeaZW0Skx10eFROa4VhqA5JrbZZQwK0jc6FCYi3u6c1ryIw6W5tcdIv1PFOKpE7VMq67yyD</span><span class="o">+</span><span class="nx">IEXc</span><span class="o">+</span><span class="nx">nl29FN5ByGhkj</span><span class="o">/</span><span class="nx">khNY1KLXcszCCa7ygSYw7mQI</span><span class="o">+</span><span class="nx">omLdyMz6aL3hg</span><span class="o">==</span>
</span></code></pre></td></tr></table></div></figure>


<p>The payload is signed with the Private key associated with you Google Play account. You can grab your public key in
<a href="https://play.google.com/apps/publish/Home#ProfileEditorPlace:">your developer console page</a>.</p>

<p>There are several crypto solutions available in python. In our example, we use <a href="https://www.dlitz.net/software/pycrypto/">pycrypto</a>.
It can easily be installed in your Django virtual environment with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pip install pycrypto
</span></code></pre></td></tr></table></div></figure>


<p>Then, the following method allows checking of the payload singature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">Crypto.Signature</span> <span class="kn">import</span> <span class="n">PKCS1_v1_5</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Crypto.Hash</span> <span class="kn">import</span> <span class="n">SHA</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Crypto.PublicKey</span> <span class="kn">import</span> <span class="n">RSA</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="n">PUBLIC_KEY</span><span class="o">=</span><span class="s">&#39;&lt;Put here your public key&gt;&#39;</span>
</span><span class='line'><span class="n">VERIFY_KEY</span><span class="o">=</span> <span class="n">RSA</span><span class="o">.</span><span class="n">importKey</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">PUBLIC_KEY</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">verify_signature</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">signature</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Verify that signature is the result of signing message&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># Get the hash of the message</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="n">SHA</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Create a verifier</span>
</span><span class='line'>    <span class="n">verifier</span> <span class="o">=</span> <span class="n">PKCS1_v1_5</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">VERIFY_KEY</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># decode the signature</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">signature</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># verify</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">verifier</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">signature</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a next post, we&#8217;ll se how to make sure on the Android application side that the responses to our
requests are really coming from our server.</p>
]]></content>
  </entry>
  
</feed>
